[
  {
    "file": "01-title.html",
    "number": 1,
    "title": "Stop Fighting Wraparound",
    "content": "<div class=\"slide title-slide\">\n  <style>\n    /* --- Title hero layout (scoped to this slide) --- */\n    .title-slide { padding: 6vh 6vw 5vh; }\n    .hero {\n      display: grid;\n      grid-template-columns: minmax(420px, 1.2fr) minmax(420px, .8fr);\n      align-items: center;\n      gap: clamp(24px, 5vw, 56px);\n      margin-top: 2vh;\n    }\n    .hero-left { display: grid; gap: clamp(8px, 1vw, 14px); }\n    .main-title {\n      font-size: clamp(44px, 6.2vw, 88px);\n      line-height: 1.05;\n      margin: 0;\n      margin-top: 0;\n      background: linear-gradient(180deg,#b8f5ff 0%, #29f5c8 60%, #1bd49a 100%);\n      -webkit-background-clip: text; background-clip: text; color: transparent;\n      text-shadow: 0 10px 40px rgba(0,0,0,.25);\n    }\n    .kicker {\n      margin: 0;\n      font-size: clamp(18px, 2.2vw, 26px);\n      font-weight: 600;\n      display: inline-flex; align-items: center; gap: .6em;\n    }\n    .kicker::before {\n      content: \"\"; width: .4em; height: 1.1em; border-radius: 2px; background: var(--accent2, #00e6a8);\n      box-shadow: 0 0 10px rgba(0,230,168,.4);\n    }\n\n    .hero-right svg { width: 100%; height: auto; display: block; }\n    .meta {\n      margin-top: clamp(24px, 4vh, 48px);\n      text-align: center;\n      display: grid;\n      gap: 8px;\n    }\n\n    /* tagline stays subtle */\n    .meta .tagline { opacity: .9; }\n\n    /* footer logo */\n    .meta-logo {\n      width: clamp(140px, 16vw, 240px);\n      height: auto;\n      margin: 10px auto 4px;\n      display: block;\n      filter: drop-shadow(0 8px 18px rgba(0, 255, 194, .15))\n              drop-shadow(0 2px 6px rgba(0, 0, 0, .35));\n      border-radius: 10px;\n    }\n\n    /* make \"Tech Talk\" larger and bolder */\n    .meta .talk {\n      font-size: clamp(36px, 5vw, 64px);\n      font-weight: 700;\n      letter-spacing: .5px;\n      opacity: .95;\n    }\n  </style>\n\n  <div class=\"hero\">\n    <div class=\"hero-left\">\n      <h1 class=\"main-title\">Stop Fighting Wraparound</h1>\n      <p class=\"kicker\">Embed Your Rings!</p>\n    </div>\n\n    <div class=\"hero-right\">\n      <!-- Bigger, cleaner SVG hero -->\n      <svg viewBox=\"0 0 460 300\">\n        <!-- circles -->\n        <circle cx=\"120\" cy=\"150\" r=\"95\" fill=\"none\" stroke=\"#4CAF50\" stroke-width=\"3\"/>\n        <circle cx=\"120\" cy=\"150\" r=\"65\" fill=\"none\" stroke=\"#4CAF50\" stroke-opacity=\".6\" stroke-width=\"3\"/>\n\n        <!-- wrong linear distance -->\n        <path d=\"M 185 150 L 55 150\" stroke=\"#FF5722\" stroke-width=\"2\" stroke-dasharray=\"6,6\" opacity=\"0.65\"/>\n        <text x=\"120\" y=\"137\" text-anchor=\"middle\" fill=\"#FFB74D\" font-weight=\"700\" font-size=\"16\">140¬∞ apart?</text>\n\n        <!-- correct arc distance -->\n        <path d=\"M 185 150 A 95 95 0 0 0 55 150\" fill=\"none\" stroke=\"#4CAF50\" stroke-width=\"3\"/>\n        <text x=\"120\" y=\"182\" text-anchor=\"middle\" fill=\"#9CFFB0\" font-weight=\"700\" font-size=\"16\">20¬∞ apart!</text>\n\n        <!-- endpoints (smaller bulbs) -->\n        <circle cx=\"185\" cy=\"150\" r=\"5\" fill=\"#FF5722\"/>\n        <circle cx=\"55\"  cy=\"150\" r=\"5\" fill=\"#2196F3\"/>\n\n        <!-- embed arrow/right panel -->\n        <path d=\"M 230 150 L 310 150\" stroke=\"#9aa4ad\" stroke-width=\"2\" marker-end=\"url(#arrowhead)\"/>\n        <text x=\"270\" y=\"136\" text-anchor=\"middle\" fill=\"#c9d1d9\" font-size=\"13\">embed</text>\n\n        <g transform=\"translate(360,150)\">\n          <line x1=\"-45\" y1=\"0\" x2=\"45\" y2=\"0\" stroke=\"#9aa4ad\" stroke-width=\"1\"/>\n          <line x1=\"0\" y1=\"-45\" x2=\"0\" y2=\"45\" stroke=\"#9aa4ad\" stroke-width=\"1\"/>\n          <circle cx=\"32\"  cy=\"0\" r=\"5\" fill=\"#FF5722\"/>\n          <circle cx=\"-32\" cy=\"0\" r=\"5\" fill=\"#2196F3\"/>\n          <text x=\"0\" y=\"-55\" text-anchor=\"middle\" fill=\"#c9d1d9\" font-size=\"12\">‚Ñù¬≤</text>\n        </g>\n\n        <defs>\n          <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"10\" refY=\"3.5\" orient=\"auto\">\n            <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"#9aa4ad\"/>\n          </marker>\n        </defs>\n      </svg>\n    </div>\n  </div>\n\n  <div class=\"meta\">\n    <p class=\"tagline\">A practical guide to handling ring-like quantities in code</p>\n\n    <!-- footer logo instead of the \"Ceres\" text -->\n    <img src=\"../ceres-tech-logo.png\" alt=\"Ceres AI\" class=\"meta-logo\" />\n\n    <p class=\"talk\">Tech Talk</p>\n  </div>\n</div>\n",
    "assets": [
      {
        "original": "/home/geoff/projects/presentation_project/ceres-tech-logo.png",
        "local": "_presentation_project_ceres-tech-logo.webp",
        "processed": null,
        "type": "image",
        "slide": "01-title.html",
        "original_match": "src=\"../ceres-tech-logo.png\""
      }
    ]
  },
  {
    "file": "02-the-bug.html",
    "number": 2,
    "title": "The Bug We've All Written",
    "content": "<div class=\"slide\">\n    <h1>The Bug We've All Written</h1>\n    \n    <div class=\"highlight-box\">\n        <h3>‚ùå The Naive Approach</h3>\n        <pre><code class=\"language-python\">def average_angle(angle1, angle2):\n    return (angle1 + angle2) / 2  # Seems reasonable...\n\n# Example: Average heading between two compass readings\nheading1 = 350  # degrees\nheading2 = 10   # degrees\n\naverage = average_angle(heading1, heading2)\nprint(f\"Average: {average}¬∞\")  # 180¬∞ - COMPLETELY WRONG!</code></pre>\n    </div>\n    \n    <div class=\"visual-demo\">\n        <svg width=\"600\" height=\"600\" viewBox=\"0 0 300 300\">\n            <!-- Compass circle -->\n            <circle cx=\"150\" cy=\"150\" r=\"120\" fill=\"none\" stroke=\"#333\" stroke-width=\"2\"/>\n            \n            <!-- Compass labels with stroke for better readability -->\n            <text x=\"150\" y=\"20\" text-anchor=\"middle\" font-size=\"16\" font-weight=\"bold\" fill=\"#FFC107\" paint-order=\"stroke\" stroke=\"#0b0f14\" stroke-width=\"3\">N (0¬∞)</text>\n            <text x=\"280\" y=\"155\" text-anchor=\"middle\" font-size=\"16\" font-weight=\"bold\" fill=\"#FFC107\" paint-order=\"stroke\" stroke=\"#0b0f14\" stroke-width=\"3\">E (90¬∞)</text>\n            <text x=\"150\" y=\"290\" text-anchor=\"middle\" font-size=\"16\" font-weight=\"bold\" fill=\"#FFC107\" paint-order=\"stroke\" stroke=\"#0b0f14\" stroke-width=\"3\">S (180¬∞)</text>\n            <text x=\"20\" y=\"155\" text-anchor=\"middle\" font-size=\"16\" font-weight=\"bold\" fill=\"#FFC107\" paint-order=\"stroke\" stroke=\"#0b0f14\" stroke-width=\"3\">W (270¬∞)</text>\n            \n            <!-- Heading 1: 350¬∞ -->\n            <line x1=\"150\" y1=\"150\" x2=\"140\" y2=\"30\" stroke=\"#2196F3\" stroke-width=\"4\"/>\n            <circle cx=\"140\" cy=\"30\" r=\"8\" fill=\"#2196F3\"/>\n            <text x=\"110\" y=\"20\" font-size=\"14\" fill=\"#FFC107\">350¬∞</text>\n            \n            <!-- Heading 2: 10¬∞ -->\n            <line x1=\"150\" y1=\"150\" x2=\"160\" y2=\"30\" stroke=\"#4CAF50\" stroke-width=\"4\"/>\n            <circle cx=\"160\" cy=\"30\" r=\"8\" fill=\"#4CAF50\"/>\n            <text x=\"190\" y=\"20\" font-size=\"14\" fill=\"#FFC107\">10¬∞</text>\n            \n            <!-- Wrong average: 180¬∞ -->\n            <line x1=\"150\" y1=\"150\" x2=\"150\" y2=\"270\" stroke=\"#FF5722\" stroke-width=\"4\" stroke-dasharray=\"5,5\"/>\n            <circle cx=\"150\" cy=\"270\" r=\"8\" fill=\"#FF5722\"/>\n            <text x=\"150\" y=\"260\" text-anchor=\"middle\" font-size=\"16\" fill=\"#FF5722\" font-weight=\"bold\">\n                Wrong: 180¬∞\n            </text>\n            \n            <!-- Correct average indicator -->\n            <line x1=\"150\" y1=\"150\" x2=\"150\" y2=\"30\" stroke=\"#FFC107\" stroke-width=\"3\" opacity=\"0.7\"/>\n            <text x=\"220\" y=\"60\" font-size=\"14\" fill=\"#ffffff\" font-weight=\"bold\">Should be ~0¬∞!</text>\n        </svg>\n    </div>\n    \n    <div class=\"warning-box\">\n        <h3>What Went Wrong?</h3>\n        <ul>\n            <li>350¬∞ and 10¬∞ are <strong>20¬∞ apart</strong> on the circle</li>\n            <li>But linear math sees them as <strong>340¬∞ apart</strong></li>\n            <li>The average points in the <strong>opposite direction</strong>!</li>\n        </ul>\n    </div>\n</div>\n\n<script>\n// Fix SVG layout and labels when this slide is displayed\nconsole.log('üéØ Slide 02-the-bug script executing');\nsetTimeout(() => {\n    console.log('üéØ Slide 02-the-bug timeout triggered');\n    const svg = document.querySelector('.visual-demo svg');\n    if (svg) {\n        console.log('   Found SVG in .visual-demo');\n        if (window.fixSVGLayoutAndLabels) {\n            console.log('   Calling fixSVGLayoutAndLabels from slide script');\n            window.fixSVGLayoutAndLabels(svg);\n        } else {\n            console.warn('   fixSVGLayoutAndLabels function not found on window');\n        }\n    } else {\n        console.warn('   No SVG found in .visual-demo');\n    }\n}, 100);\n</script>\n\n",
    "assets": []
  },
  {
    "file": "03-midnight-bug.html",
    "number": 3,
    "title": "The Midnight Bug",
    "content": "<div class=\"slide\">\n    <h1>The Midnight Bug</h1>\n    \n    <div class=\"info-box\">\n        <h3>üìÖ Real Scenario: Event Duration Tracking</h3>\n        <p>Meeting started at <strong>23:45</strong> (11:45 PM)</p>\n        <p>Meeting ended at <strong>00:15</strong> (12:15 AM)</p>\n    </div>\n    \n    <div class=\"code-comparison\">\n        <div class=\"highlight-box\">\n            <h4>‚ùå What Everyone Tries First</h4>\n            <pre><code>start_time = 23.75  # 23:45 in decimal hours\nend_time = 0.25     # 00:15 in decimal hours\n\nduration = end_time - start_time\nprint(f\"Duration: {duration} hours\")\n# Output: -23.5 hours ü§¶</code></pre>\n        </div>\n        \n        <div class=\"warning-box\">\n            <h4>ü§î The Hacky \"Fix\"</h4>\n            <pre><code>if end_time < start_time:\n    # Must have crossed midnight\n    duration = (24 - start_time) + end_time\nelse:\n    duration = end_time - start_time\n    \n# More special cases...\nif crossed_dst:  # Daylight savings\n    duration += 1  # or -1? üò≠</code></pre>\n        </div>\n    </div>\n    \n    <div class=\"clock-visual\">\n        <svg width=\"1200\" height=\"500\" viewBox=\"0 0 800 300\">\n            <!-- Linear representation -->\n            <g transform=\"translate(30, 80)\">\n                <text x=\"150\" y=\"-20\" text-anchor=\"middle\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFC107\">Linear View:</text>\n                <line x1=\"0\" y1=\"20\" x2=\"300\" y2=\"20\" stroke=\"#333\" stroke-width=\"2\"/>\n                \n                <!-- Time markers -->\n                <line x1=\"0\" y1=\"15\" x2=\"0\" y2=\"25\" stroke=\"#333\" stroke-width=\"2\"/>\n                <text x=\"0\" y=\"40\" text-anchor=\"middle\" font-size=\"12\" fill=\"#FFC107\">0:00</text>\n                \n                <line x1=\"150\" y1=\"15\" x2=\"150\" y2=\"25\" stroke=\"#333\" stroke-width=\"2\"/>\n                <text x=\"150\" y=\"40\" text-anchor=\"middle\" font-size=\"12\" fill=\"#FFC107\">12:00</text>\n                \n                <line x1=\"300\" y1=\"15\" x2=\"300\" y2=\"25\" stroke=\"#333\" stroke-width=\"2\"/>\n                <text x=\"300\" y=\"40\" text-anchor=\"middle\" font-size=\"12\" fill=\"#FFC107\">24:00</text>\n                \n                <!-- Start time: 23:45 (23.75/24 * 300 = 296.25) -->\n                <circle cx=\"296\" cy=\"20\" r=\"8\" fill=\"#2196F3\"/>\n                <text x=\"296\" y=\"60\" text-anchor=\"middle\" font-size=\"12\" fill=\"#FFC107\">23:45</text>\n                \n                <!-- End time: 00:15 (0.25/24 * 300 = 3.125) -->\n                <circle cx=\"3\" cy=\"20\" r=\"8\" fill=\"#4CAF50\"/>\n                <text x=\"3\" y=\"60\" text-anchor=\"middle\" font-size=\"12\" fill=\"#FFC107\">00:15</text>\n                \n                <!-- Wrong distance -->\n                <path d=\"M 296 20 L 3 20\" stroke=\"#FF5722\" stroke-width=\"2\" stroke-dasharray=\"5,5\" opacity=\"0.5\"/>\n                <text x=\"150\" y=\"80\" text-anchor=\"middle\" fill=\"#FF5722\" font-size=\"14\">Linear: -23.5 hours!</text>\n            </g>\n            \n            <!-- Circular representation -->\n            <g transform=\"translate(550, 150)\">\n                <text x=\"0\" y=\"-90\" text-anchor=\"middle\" font-size=\"14\" font-weight=\"bold\" fill=\"#FFC107\">Circular View:</text>\n                <circle cx=\"0\" cy=\"0\" r=\"70\" fill=\"none\" stroke=\"#333\" stroke-width=\"2\"/>\n                \n                <!-- Clock numbers -->\n                <text x=\"0\" y=\"-55\" text-anchor=\"middle\" font-size=\"12\" fill=\"#FFC107\">12</text>\n                <text x=\"55\" y=\"5\" text-anchor=\"middle\" font-size=\"12\" fill=\"#FFC107\">3</text>\n                <text x=\"0\" y=\"60\" text-anchor=\"middle\" font-size=\"12\" fill=\"#FFC107\">6</text>\n                <text x=\"-55\" y=\"5\" text-anchor=\"middle\" font-size=\"12\" fill=\"#FFC107\">9</text>\n                \n                <!-- Start: 23:45 -->\n                <line x1=\"0\" y1=\"0\" x2=\"-10\" y2=\"-68\" stroke=\"#2196F3\" stroke-width=\"3\"/>\n                <circle cx=\"-10\" cy=\"-68\" r=\"8\" fill=\"#2196F3\"/>\n                \n                <!-- End: 00:15 -->\n                <line x1=\"0\" y1=\"0\" x2=\"10\" y2=\"-68\" stroke=\"#4CAF50\" stroke-width=\"3\"/>\n                <circle cx=\"10\" cy=\"-68\" r=\"8\" fill=\"#4CAF50\"/>\n                \n                <!-- Correct arc -->\n                <path d=\"M -10 -68 A 70 70 0 0 1 10 -68\" fill=\"none\" stroke=\"#4CAF50\" stroke-width=\"3\"/>\n                <text x=\"0\" y=\"90\" text-anchor=\"middle\" fill=\"#4CAF50\" font-size=\"14\" font-weight=\"bold\">\n                    Correct: 30 minutes!\n                </text>\n            </g>\n        </svg>\n    </div>\n    \n    <div class=\"success-box\">\n        <h3>üí° The Key Insight</h3>\n        <p>Time-of-day is a <strong>24-hour ring</strong>, not a line!</p>\n        <p>Linear arithmetic breaks at the wraparound point.</p>\n    </div>\n</div>\n\n",
    "assets": []
  },
  {
    "file": "11-interactive-demo.html",
    "number": 4,
    "title": "Interactive Demo",
    "content": "<div class=\"slide\">\n    <h1>Interactive Demo</h1>\n    \n    <div class=\"demo-container\">\n        <div class=\"demo-section\">\n            <h3>üéÆ Try It Yourself: Angle Averaging</h3>\n            \n            <div class=\"angle-inputs\">\n                <label>\n                    Angle 1: <input type=\"range\" id=\"angle1\" min=\"0\" max=\"359\" value=\"350\">\n                    <span id=\"angle1-display\">350¬∞</span>\n                </label>\n                <label>\n                    Angle 2: <input type=\"range\" id=\"angle2\" min=\"0\" max=\"359\" value=\"10\">\n                    <span id=\"angle2-display\">10¬∞</span>\n                </label>\n            </div>\n            \n            <div class=\"demo-visual\">\n                <svg width=\"400\" height=\"400\" viewBox=\"0 0 400 400\" id=\"demo-svg\">\n                    <!-- Circle -->\n                    <circle cx=\"200\" cy=\"200\" r=\"150\" fill=\"none\" stroke=\"#333\" stroke-width=\"2\"/>\n                    \n                    <!-- Compass labels -->\n                    <text x=\"200\" y=\"30\" text-anchor=\"middle\" font-size=\"16\" font-weight=\"bold\" fill=\"#FFC107\">0¬∞</text>\n                    <text x=\"370\" y=\"205\" text-anchor=\"middle\" font-size=\"16\" font-weight=\"bold\" fill=\"#FFC107\">90¬∞</text>\n                    <text x=\"200\" y=\"380\" text-anchor=\"middle\" font-size=\"16\" font-weight=\"bold\" fill=\"#FFC107\">180¬∞</text>\n                    <text x=\"30\" y=\"205\" text-anchor=\"middle\" font-size=\"16\" font-weight=\"bold\" fill=\"#FFC107\">270¬∞</text>\n                    \n                    <!-- Angle 1 line -->\n                    <line id=\"angle1-line\" x1=\"200\" y1=\"200\" x2=\"200\" y2=\"50\" stroke=\"#2196F3\" stroke-width=\"4\"/>\n                    <circle id=\"angle1-point\" cx=\"200\" cy=\"50\" r=\"8\" fill=\"#2196F3\"/>\n                    \n                    <!-- Angle 2 line -->\n                    <line id=\"angle2-line\" x1=\"200\" y1=\"200\" x2=\"200\" y2=\"50\" stroke=\"#4CAF50\" stroke-width=\"4\"/>\n                    <circle id=\"angle2-point\" cx=\"200\" cy=\"50\" r=\"8\" fill=\"#4CAF50\"/>\n                    \n                    <!-- Average (wrong) -->\n                    <line id=\"avg-wrong-line\" x1=\"200\" y1=\"200\" x2=\"200\" y2=\"350\" stroke=\"#FF5722\" stroke-width=\"3\" stroke-dasharray=\"5,5\" opacity=\"0\"/>\n                    <circle id=\"avg-wrong-point\" cx=\"200\" cy=\"350\" r=\"6\" fill=\"#FF5722\" opacity=\"0\"/>\n                    \n                    <!-- Average (correct) -->\n                    <line id=\"avg-correct-line\" x1=\"200\" y1=\"200\" x2=\"200\" y2=\"50\" stroke=\"#FFC107\" stroke-width=\"4\"/>\n                    <circle id=\"avg-correct-point\" cx=\"200\" cy=\"50\" r=\"8\" fill=\"#FFC107\"/>\n                </svg>\n            </div>\n            \n            <div class=\"demo-results\">\n                <div class=\"result wrong-result\">\n                    <h4>‚ùå Linear Average</h4>\n                    <p id=\"wrong-result\">180¬∞</p>\n                </div>\n                \n                <div class=\"result correct-result\">\n                    <h4>‚úÖ Circular Average</h4>\n                    <p id=\"correct-result\">0¬∞</p>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"code-section\">\n            <h3>The Code Behind It</h3>\n            <pre><code id=\"demo-code\">function circularAverage(a1, a2) {\n    // Convert to radians\n    const theta1 = a1 * Math.PI / 180;\n    const theta2 = a2 * Math.PI / 180;\n    \n    // Embed on unit circle\n    const v1 = [Math.cos(theta1), Math.sin(theta1)];\n    const v2 = [Math.cos(theta2), Math.sin(theta2)];\n    \n    // Average vectors\n    const avgVec = [(v1[0] + v2[0])/2, (v1[1] + v2[1])/2];\n    \n    // Convert back to angle\n    const avgTheta = Math.atan2(avgVec[1], avgVec[0]);\n    return (avgTheta * 180 / Math.PI + 360) % 360;\n}</code></pre>\n        </div>\n    </div>\n</div>\n\n\n",
    "assets": []
  },
  {
    "file": "05-robot-heading.html",
    "number": 5,
    "title": "Real Example: Robot/Drone Heading Control",
    "content": "<div class=\"slide\">\n    <h1>Real Example: Robot/Drone Heading Control</h1>\n    \n    <div class=\"problem-setup\">\n        <h3>ü§ñ The Scenario</h3>\n        <p>PID controller needs to turn robot from 350¬∞ to 10¬∞</p>\n    </div>\n    \n    <div class=\"visual-comparison\">\n        <div class=\"approach bad-approach\">\n            <h4>‚ùå Naive PID Error</h4>\n            <svg width=\"500\" height=\"500\" viewBox=\"0 0 250 250\">\n                <circle cx=\"125\" cy=\"125\" r=\"100\" fill=\"none\" stroke=\"#333\" stroke-width=\"2\"/>\n                \n                <!-- Current heading: 350¬∞ -->\n                <line x1=\"125\" y1=\"125\" x2=\"115\" y2=\"25\" stroke=\"#2196F3\" stroke-width=\"4\"/>\n                <circle cx=\"115\" cy=\"25\" r=\"6\" fill=\"#2196F3\"/>\n                <text x=\"75\" y=\"15\" font-size=\"12\" fill=\"#FFC107\">Current: 350¬∞</text>\n                \n                <!-- Target heading: 10¬∞ -->\n                <line x1=\"125\" y1=\"125\" x2=\"135\" y2=\"25\" stroke=\"#4CAF50\" stroke-width=\"4\"/>\n                <circle cx=\"135\" cy=\"25\" r=\"6\" fill=\"#4CAF50\"/>\n                <text x=\"175\" y=\"15\" font-size=\"12\" fill=\"#FFC107\">Target: 10¬∞</text>\n                \n                <!-- Wrong rotation path -->\n                <path d=\"M 115 25 A 100 100 0 1 1 135 25\" fill=\"none\" stroke=\"#FF5722\" stroke-width=\"3\" stroke-dasharray=\"5,5\"/>\n                <text x=\"125\" y=\"200\" text-anchor=\"middle\" font-size=\"14\" fill=\"#FF5722\" font-weight=\"bold\">\n                    Error: -340¬∞\n                </text>\n                <text x=\"125\" y=\"220\" text-anchor=\"middle\" font-size=\"12\" fill=\"#FF5722\">\n                    Spins backward!\n                </text>\n            </svg>\n            \n            <pre><code>error = target - current\nerror = 10 - 350 = -340¬∞\n# Robot spins almost full circle\n# the wrong way!</code></pre>\n        </div>\n        \n        <div class=\"approach good-approach\">\n            <h4>‚úÖ Embedded Solution</h4>\n            <svg width=\"500\" height=\"500\" viewBox=\"0 0 250 250\">\n                <circle cx=\"125\" cy=\"125\" r=\"100\" fill=\"none\" stroke=\"#333\" stroke-width=\"2\"/>\n                \n                <!-- Current heading: 350¬∞ -->\n                <line x1=\"125\" y1=\"125\" x2=\"115\" y2=\"25\" stroke=\"#2196F3\" stroke-width=\"4\"/>\n                <circle cx=\"115\" cy=\"25\" r=\"6\" fill=\"#2196F3\"/>\n                <text x=\"75\" y=\"15\" font-size=\"12\" fill=\"#FFC107\">Current: 350¬∞</text>\n                \n                <!-- Target heading: 10¬∞ -->\n                <line x1=\"125\" y1=\"125\" x2=\"135\" y2=\"25\" stroke=\"#4CAF50\" stroke-width=\"4\"/>\n                <circle cx=\"135\" cy=\"25\" r=\"6\" fill=\"#4CAF50\"/>\n                <text x=\"175\" y=\"15\" font-size=\"12\" fill=\"#FFC107\">Target: 10¬∞</text>\n                \n                <!-- Correct rotation path -->\n                <path d=\"M 115 25 A 100 100 0 0 1 135 25\" fill=\"none\" stroke=\"#4CAF50\" stroke-width=\"3\"/>\n                <text x=\"125\" y=\"200\" text-anchor=\"middle\" font-size=\"14\" fill=\"#4CAF50\" font-weight=\"bold\">\n                    Error: +20¬∞\n                </text>\n                <text x=\"125\" y=\"220\" text-anchor=\"middle\" font-size=\"12\" fill=\"#4CAF50\">\n                    Efficient turn!\n                </text>\n            </svg>\n            \n            <pre><code>def heading_error(current, target):\n    c_vec = [cos(current), sin(current)]\n    t_vec = [cos(target), sin(target)]\n    return atan2(cross(c_vec, t_vec), \n                 dot(c_vec, t_vec))\n# Returns: +20¬∞ (shortest path!)</code></pre>\n        </div>\n    </div>\n    \n    <div class=\"implementation\">\n        <h3>Complete PID Controller Fix</h3>\n        <pre><code class=\"language-python\">class HeadingController:\n    def __init__(self, kp=1.0, ki=0.1, kd=0.05):\n        self.kp, self.ki, self.kd = kp, ki, kd\n        self.integral = 0\n        self.last_error = 0\n        \n    def compute_control(self, current_heading, target_heading, dt):\n        # Embed both headings as vectors\n        current_vec = np.array([np.cos(current_heading), np.sin(current_heading)])\n        target_vec = np.array([np.cos(target_heading), np.sin(target_heading)])\n        \n        # Compute signed angle error (always shortest path)\n        error = np.arctan2(\n            current_vec[0] * target_vec[1] - current_vec[1] * target_vec[0],\n            current_vec[0] * target_vec[0] + current_vec[1] * target_vec[1]\n        )\n        \n        # Standard PID computation (now with correct error!)\n        self.integral += error * dt\n        derivative = (error - self.last_error) / dt\n        \n        control = self.kp * error + self.ki * self.integral + self.kd * derivative\n        self.last_error = error\n        \n        return control  # Angular velocity command</code></pre>\n    </div>\n    \n    <div class=\"impact-note\">\n        <p>üí∞ <strong>Real Impact:</strong> Shipping routes crossing the Pacific get drawn spanning ~359¬∞ longitude instead of the short ~20 nautical mile path due to antimeridian wraparound bugs in mapping SDKs</p>\n    </div>\n</div>\n\n",
    "assets": []
  },
  {
    "file": "06-color-interpolation.html",
    "number": 6,
    "title": "Drag the Hues on the Wheel",
    "content": "<div class=\"slide color-interpolation\">\n  <style>\n    /* Scoped styles for color interpolation slide */\n    .color-interpolation {\n      padding: 2vh 3vw;\n      display: flex;\n      flex-direction: column;\n      gap: 1.5vh;\n    }\n\n    .color-interpolation h1 {\n      font-size: clamp(24px, 3vw, 40px);\n      margin: 0 0 1vh 0;\n      text-align: center;\n      background: linear-gradient(135deg, #ff6b6b, #4ecdc4);\n      -webkit-background-clip: text;\n      background-clip: text;\n      color: transparent;\n    }\n\n    .color-interpolation .card {\n      background: rgba(255, 255, 255, 0.04);\n      border: 1px solid rgba(255, 255, 255, 0.09);\n      border-radius: 14px;\n      padding: 14px 16px;\n      margin-bottom: 1vh;\n    }\n\n    .color-interpolation .drag-wrap {\n      display: grid;\n      grid-template-columns: 420px 1fr;\n      gap: 28px;\n      align-items: start;\n      flex: 1;\n    }\n\n    @media (max-width: 960px) {\n      .color-interpolation .drag-wrap {\n        grid-template-columns: 1fr;\n      }\n    }\n\n    .color-interpolation .drag-wheel {\n      position: relative;\n      width: 400px;\n      height: 400px;\n      margin: 0 auto;\n    }\n\n    .color-interpolation .drag-wheel .wheel {\n      position: absolute;\n      inset: 0;\n      border-radius: 50%;\n      /* Red at North: default starting position is top */\n      background: conic-gradient(\n        hsl(0, 100%, 50%),\n        hsl(60, 100%, 50%),\n        hsl(120, 100%, 50%),\n        hsl(180, 100%, 50%),\n        hsl(240, 100%, 50%),\n        hsl(300, 100%, 50%),\n        hsl(360, 100%, 50%)\n      );\n      box-shadow: 0 10px 26px rgba(0, 0, 0, 0.35);\n    }\n\n    /* Concentric inner mask to make a neat ring (no offset) */\n    .color-interpolation .drag-wheel .mask {\n      position: absolute;\n      inset: 42px;\n      background: #0b1117;\n      border-radius: 50%;\n      box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.08);\n      pointer-events: none;\n    }\n\n    .color-interpolation .drag-wheel svg {\n      position: absolute;\n      inset: 0;\n      overflow: visible;\n    }\n\n    .color-interpolation .legend2 {\n      display: grid;\n      gap: 8px;\n      color: #cfe0f1;\n      font-size: 14px;\n    }\n\n    .color-interpolation .chip-row {\n      display: flex;\n      gap: 14px;\n      align-items: center;\n      flex-wrap: wrap;\n    }\n\n    .color-interpolation .chip {\n      display: inline-flex;\n      align-items: center;\n      gap: 8px;\n      padding: 6px 10px;\n      border: 1px solid rgba(255, 255, 255, 0.12);\n      border-radius: 10px;\n      background: rgba(255, 255, 255, 0.02);\n    }\n\n    .color-interpolation .dot {\n      width: 12px;\n      height: 12px;\n      border-radius: 50%;\n      display: inline-block;\n      box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.35) inset;\n    }\n\n    .color-interpolation .mono {\n      font-family: ui-monospace, SFMono-Regular, Menlo, Consolas,\n        \"Liberation Mono\", monospace;\n    }\n\n    .color-interpolation .midbars {\n      display: grid;\n      gap: 8px;\n      margin-top: 10px;\n    }\n\n    .color-interpolation .midbars .bar {\n      height: 18px;\n      border: 1px solid rgba(255, 255, 255, 0.12);\n      border-radius: 10px;\n    }\n  </style>\n\n  <h1>Drag the Hues on the Wheel</h1>\n\n  <div class=\"card\">\n    <p>\n      Drag the two handles <strong>A</strong> and <strong>B</strong> on the hue\n      wheel. The vectors are colored by their hues. We show two \"midpoints\": the\n      <strong>correct circular midpoint</strong> (shortest arc,\n      <code>t=0.5</code>) and the <strong>naive linear midpoint</strong> (just\n      averaging numbers). Watch how naive linear often cuts through unrelated\n      hues.\n    </p>\n  </div>\n\n  <div class=\"drag-wrap\">\n    <div class=\"drag-wheel\" aria-label=\"Hue wheel with draggable handles\">\n      <div class=\"wheel\"></div>\n      <div class=\"mask\"></div>\n      <svg id=\"dwSVG\" viewBox=\"0 0 400 400\" width=\"400\" height=\"400\">\n        <defs>\n          <filter id=\"vec-shadow\">\n            <feDropShadow\n              dx=\"0\"\n              dy=\"1\"\n              stdDeviation=\"1.2\"\n              flood-color=\"#000\"\n              flood-opacity=\".65\"\n            />\n          </filter>\n        </defs>\n        <!-- guide ring -->\n        <circle\n          cx=\"200\"\n          cy=\"200\"\n          r=\"179\"\n          fill=\"none\"\n          stroke=\"rgba(255,255,255,.22)\"\n          stroke-width=\"1\"\n        />\n        <!-- arc between A and B (shortest arc) -->\n        <path\n          id=\"dwArc\"\n          d=\"\"\n          fill=\"none\"\n          stroke=\"#FFD180\"\n          stroke-width=\"5\"\n          stroke-linecap=\"round\"\n          stroke-dasharray=\"6,7\"\n          opacity=\".9\"\n        />\n        <!-- vectors -->\n        <g id=\"vecA\" filter=\"url(#vec-shadow)\">\n          <line\n            id=\"lineA\"\n            x1=\"200\"\n            y1=\"200\"\n            x2=\"200\"\n            y2=\"42\"\n            stroke=\"#fff\"\n            stroke-width=\"7\"\n          />\n          <circle\n            id=\"handleA\"\n            cx=\"200\"\n            cy=\"42\"\n            r=\"9\"\n            fill=\"#fff\"\n            stroke=\"rgba(0,0,0,.5)\"\n            stroke-width=\"2\"\n          />\n          <text\n            id=\"labelA\"\n            x=\"200\"\n            y=\"28\"\n            text-anchor=\"middle\"\n            fill=\"#e6eef9\"\n            font-size=\"13\"\n          >\n            A\n          </text>\n        </g>\n        <g id=\"vecB\" filter=\"url(#vec-shadow)\">\n          <line\n            id=\"lineB\"\n            x1=\"200\"\n            y1=\"200\"\n            x2=\"200\"\n            y2=\"42\"\n            stroke=\"#fff\"\n            stroke-width=\"7\"\n          />\n          <circle\n            id=\"handleB\"\n            cx=\"200\"\n            cy=\"42\"\n            r=\"9\"\n            fill=\"#fff\"\n            stroke=\"rgba(0,0,0,.5)\"\n            stroke-width=\"2\"\n          />\n          <text\n            id=\"labelB\"\n            x=\"200\"\n            y=\"28\"\n            text-anchor=\"middle\"\n            fill=\"#e6eef9\"\n            font-size=\"13\"\n          >\n            B\n          </text>\n        </g>\n        <!-- correct midpoint vector -->\n        <g id=\"vecMid\" filter=\"url(#vec-shadow)\">\n          <line\n            id=\"lineMid\"\n            x1=\"200\"\n            y1=\"200\"\n            x2=\"200\"\n            y2=\"42\"\n            stroke=\"#fff\"\n            stroke-width=\"7\"\n          />\n          <circle\n            id=\"handleMid\"\n            cx=\"200\"\n            cy=\"42\"\n            r=\"9\"\n            fill=\"#fff\"\n            stroke=\"rgba(0,0,0,.5)\"\n            stroke-width=\"2\"\n          />\n          <text\n            id=\"labelMid\"\n            x=\"200\"\n            y=\"28\"\n            text-anchor=\"middle\"\n            fill=\"#e6eef9\"\n            font-size=\"13\"\n          >\n            circular mid\n          </text>\n        </g>\n        <!-- naive midpoint vector -->\n        <g id=\"vecNaive\" filter=\"url(#vec-shadow)\">\n          <line\n            id=\"lineNaive\"\n            x1=\"200\"\n            y1=\"200\"\n            x2=\"200\"\n            y2=\"42\"\n            stroke=\"#fff\"\n            stroke-width=\"5\"\n            stroke-dasharray=\"4,6\"\n          />\n          <circle\n            id=\"handleNaive\"\n            cx=\"200\"\n            cy=\"42\"\n            r=\"7\"\n            fill=\"#fff\"\n            stroke=\"rgba(0,0,0,.5)\"\n            stroke-width=\"2\"\n          />\n          <text\n            id=\"labelNaive\"\n            x=\"200\"\n            y=\"28\"\n            text-anchor=\"middle\"\n            fill=\"#e6eef9\"\n            font-size=\"12\"\n          >\n            naive mid\n          </text>\n        </g>\n      </svg>\n    </div>\n\n    <div class=\"legend2\">\n      <div class=\"chip-row\">\n        <div class=\"chip\">\n          <span class=\"dot\" id=\"dotA\"></span>\n          <span class=\"mono\">A: <span id=\"degA\">0¬∞</span></span>\n        </div>\n        <div class=\"chip\">\n          <span class=\"dot\" id=\"dotB\"></span>\n          <span class=\"mono\">B: <span id=\"degB\">0¬∞</span></span>\n        </div>\n        <div class=\"chip\">\n          <span class=\"dot\" id=\"dotMid\"></span>\n          <span class=\"mono\"\n            >Circular mid (t=0.5): <span id=\"degMid\">0¬∞</span></span\n          >\n        </div>\n        <div class=\"chip\">\n          <span class=\"dot\" id=\"dotNaive\"></span>\n          <span class=\"mono\">Naive mid: <span id=\"degNaive\">0¬∞</span></span>\n        </div>\n      </div>\n      <div class=\"midbars\">\n        <div class=\"bar\" id=\"barCircular\" title=\"Circular midpoint path\"></div>\n        <small>\n          Correct (circular): follows the shorter arc between A and B.\n        </small>\n        <div class=\"bar\" id=\"barNaive\" title=\"Naive midpoint colors\"></div>\n        <small>\n          Naive (linear hue numbers): can jump across unrelated hues.\n        </small>\n      </div>\n    </div>\n  </div>\n</div>\n",
    "assets": []
  },
  {
    "file": "15-other-circular-quantities.html",
    "number": 7,
    "title": "Hidden Rings Everywhere: Beyond Angles & Time",
    "content": "<div class=\"slide\">\n    <h1>Hidden Rings Everywhere: Beyond Angles & Time</h1>\n    \n    <div class=\"warning-box\">\n        <h3>üîç Circular Quantities Hide in Plain Sight</h3>\n        <p>It's not just angles, time, and colors that wrap around. Here are the sneaky cyclic variables that cause bugs when you least expect them:</p>\n    </div>\n    \n    <div class=\"pattern-table\">\n        <table style=\"width: 100%; border-collapse: collapse;\">\n            <thead>\n                <tr style=\"background: rgba(33, 150, 243, 0.1); border-bottom: 2px solid #2196F3;\">\n                    <th style=\"padding: 12px; text-align: left; width: 30%;\">Domain</th>\n                    <th style=\"padding: 12px; text-align: left; width: 35%;\">‚ùå Where Naive Math Fails</th>\n                    <th style=\"padding: 12px; text-align: left; width: 35%;\">‚úÖ Correct Embedding</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr style=\"border-bottom: 1px solid #444;\">\n                    <td style=\"padding: 10px;\"><strong>üìÖ Weekdays</strong><br><code>d ‚àà {0..6}</code></td>\n                    <td style=\"padding: 10px;\">Mean of Sat(6) and Mon(1) = 3.5 (Wed)?<br><span style=\"color: #FF5722;\">Wrong! Should be Sunday</span></td>\n                    <td style=\"padding: 10px;\"><code>(cos(2œÄd/7), sin(2œÄd/7))</code></td>\n                </tr>\n                <tr style=\"border-bottom: 1px solid #444; background: rgba(255, 255, 255, 0.02);\">\n                    <td style=\"padding: 10px;\"><strong>üîß Rotary Encoders</strong><br><code>n ‚àà [0, 4096)</code></td>\n                    <td style=\"padding: 10px;\">4095 ‚Üí 1 looks like ‚àí4094 ticks<br><span style=\"color: #FF5722;\">Actually just 2 ticks forward!</span></td>\n                    <td style=\"padding: 10px;\"><code>(cos(2œÄn/N), sin(2œÄn/N))</code></td>\n                </tr>\n                <tr style=\"border-bottom: 1px solid #444;\">\n                    <td style=\"padding: 10px;\"><strong>üåç Longitude</strong><br><code>Œª ‚àà [‚àí180¬∞, 180¬∞)</code></td>\n                    <td style=\"padding: 10px;\">Mean of 179¬∞E and 179¬∞W = 0¬∞?<br><span style=\"color: #FF5722;\">Points are 2¬∞ apart, not at Greenwich!</span></td>\n                    <td style=\"padding: 10px;\">3D vectors on sphere:<br><code>(cos(lat)cos(lon), cos(lat)sin(lon), sin(lat))</code></td>\n                </tr>\n                <tr style=\"border-bottom: 1px solid #444; background: rgba(255, 255, 255, 0.02);\">\n                    <td style=\"padding: 10px;\"><strong>üì° Signal Phase</strong><br><code>œÜ ‚àà [‚àíœÄ, œÄ)</code></td>\n                    <td style=\"padding: 10px;\">Phase unwrapping creates artificial jumps<br><span style=\"color: #FF5722;\">Destroys true periodicity</span></td>\n                    <td style=\"padding: 10px;\">Complex: <code>e<sup>iœÜ</sup> = cos(œÜ) + i¬∑sin(œÜ)</code></td>\n                </tr>\n                <tr style=\"border-bottom: 1px solid #444;\">\n                    <td style=\"padding: 10px;\"><strong>üíç Ring Buffers</strong><br><code>idx ‚àà [0, size)</code></td>\n                    <td style=\"padding: 10px;\"><code>tail - head</code> wrong when wrapped<br><span style=\"color: #FF5722;\">Buffer looks full when nearly empty!</span></td>\n                    <td style=\"padding: 10px;\"><code>(idx + size) % size</code><br>or embed as angle</td>\n                </tr>\n                <tr style=\"border-bottom: 1px solid #444; background: rgba(255, 255, 255, 0.02);\">\n                    <td style=\"padding: 10px;\"><strong>‚öôÔ∏è Gear Teeth</strong><br><code>tooth ‚àà [0, N)</code></td>\n                    <td style=\"padding: 10px;\">Tooth 0 and Tooth N-1 look maximally apart<br><span style=\"color: #FF5722;\">They're actually neighbors!</span></td>\n                    <td style=\"padding: 10px;\"><code>(cos(2œÄt/N), sin(2œÄt/N))</code></td>\n                </tr>\n                <tr style=\"border-bottom: 1px solid #444;\">\n                    <td style=\"padding: 10px;\"><strong>üß¨ Circadian Phase</strong><br><code>t ‚àà [0, 24h)</code></td>\n                    <td style=\"padding: 10px;\">Sleep at 23:00 and 01:00 averages to noon?<br><span style=\"color: #FF5722;\">Should be midnight!</span></td>\n                    <td style=\"padding: 10px;\"><code>(cos(2œÄt/24), sin(2œÄt/24))</code></td>\n                </tr>\n                <tr style=\"border-bottom: 1px solid #444; background: rgba(255, 255, 255, 0.02);\">\n                    <td style=\"padding: 10px;\"><strong>üìä Months of Year</strong><br><code>m ‚àà {1..12}</code></td>\n                    <td style=\"padding: 10px;\">Dec(12) to Jan(1) = -11 months?<br><span style=\"color: #FF5722;\">Just 1 month forward!</span></td>\n                    <td style=\"padding: 10px;\"><code>(cos(2œÄm/12), sin(2œÄm/12))</code></td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    \n    <div class=\"highlight-box\">\n        <h3>üí° The Universal Solution</h3>\n        <div class=\"formula-showcase\">\n            <p style=\"text-align: center; font-size: 18px; margin: 15px 0;\">\n                <strong>For ANY cyclic quantity with period T starting at offset s:</strong>\n            </p>\n            <p style=\"text-align: center; font-size: 20px; background: rgba(76, 175, 80, 0.1); padding: 15px; border-radius: 8px;\">\n                <code>Œ∏ = 2œÄ(value - s)/T</code> ‚Üí <code>(cos(Œ∏), sin(Œ∏))</code>\n            </p>\n            <p style=\"text-align: center; margin-top: 15px;\">\n                Do all your math in vector space, then project back if needed!\n            </p>\n        </div>\n    </div>\n    \n    <div class=\"info-box\">\n        <h3>üéØ When to Suspect a Hidden Ring</h3>\n        <div class=\"two-column\">\n            <div>\n                <h4>üö© Red Flags in Your Data</h4>\n                <ul>\n                    <li>Values that \"roll over\" or \"wrap\"</li>\n                    <li>Modulo operations in the code</li>\n                    <li>Special cases for \"crossing midnight\"</li>\n                    <li>Discontinuous jumps in time series</li>\n                    <li>\"Distance\" that depends on direction</li>\n                </ul>\n            </div>\n            <div>\n                <h4>üêõ Classic Bug Patterns</h4>\n                <ul>\n                    <li>Averages that are wildly wrong</li>\n                    <li>Interpolation that takes the \"long way\"</li>\n                    <li>Derivatives with impossible spikes</li>\n                    <li>Sorting that puts neighbors far apart</li>\n                    <li>Clustering that splits natural groups</li>\n                </ul>\n            </div>\n        </div>\n    </div>\n</div>",
    "assets": []
  },
  {
    "file": "12-gis-demo.html",
    "number": 8,
    "title": "üåç GIS Demo: Longitude Wraparound at the International Date Line",
    "content": "<div class=\"slide\" style=\"display:grid; gap:12px;\">\n  <h1>üåç GIS Demo: Longitude Wraparound at the International Date Line</h1>\n  \n  <div class=\"info-box\">\n    <h3>Real-World Problem: Computing Geographic Means</h3>\n    <p>When averaging GPS coordinates near ¬±180¬∞ longitude (International Date Line), linear arithmetic fails spectacularly. A farm field split by the date line appears to span the entire globe!</p>\n  </div>\n  \n  <div id=\"map\" style=\"height:600px; border-radius:12px; overflow:hidden; border:1px solid rgba(255,255,255,.15)\"></div>\n  \n  <div style=\"display:flex; gap:16px; flex-wrap:wrap; align-items:center;\">\n    <label><input type=\"checkbox\" id=\"worldCopy\" checked> worldCopyJump (wrap world)</label>\n    <label><input type=\"checkbox\" id=\"noWrapTiles\"> tile noWrap (stop wrapping tiles)</label>\n    <span id=\"readout\" style=\"opacity:.9; font-family: monospace;\">Circular mean: ‚Ä¶</span>\n  </div>\n  \n  <div class=\"success-box\">\n    <h3>üéØ Try This: Drag the markers across the International Date Line!</h3>\n    <p><strong>Red marker</strong> = Wrong linear mean | <strong>Green marker</strong> = Correct circular mean</p>\n    <p>Watch how the linear mean jumps to the middle of the Atlantic while the circular mean stays put! This is the classic longitude wraparound bug.</p>\n  </div>\n  \n  <div class=\"code-example\">\n    <h3>Spherical Coordinate Embedding</h3>\n    <pre><code class=\"language-python\"># For full lat/long geometry operations\ndef latlon_to_cartesian(lat, lon):\n    \"\"\"Embed (lat,lon) in R¬≥ for linear operations\"\"\"\n    lat_rad = np.radians(lat)\n    lon_rad = np.radians(lon)\n    return np.array([\n        np.cos(lat_rad) * np.cos(lon_rad),  # x\n        np.cos(lat_rad) * np.sin(lon_rad),  # y  \n        np.sin(lat_rad)                     # z\n    ])\n\n# Geographic centroid (works across antimeridian!)\ndef geographic_centroid(lat_lon_pairs):\n    cartesian_points = [latlon_to_cartesian(lat, lon) \n                       for lat, lon in lat_lon_pairs]\n    mean_cartesian = np.mean(cartesian_points, axis=0)\n    mean_cartesian /= np.linalg.norm(mean_cartesian)  # Back to unit sphere\n    \n    # Convert back to lat/lon\n    lat = np.degrees(np.arcsin(mean_cartesian[2]))\n    lon = np.degrees(np.arctan2(mean_cartesian[1], mean_cartesian[0]))\n    return lat, lon</code></pre>\n  </div>\n  \n  <div class=\"warning-box\">\n    <h3>üè¢ Company Applications</h3>\n    <ul>\n      <li><strong>Spatial Statistics:</strong> Computing true centroids for service areas</li>\n      <li><strong>Route Optimization:</strong> Distance calculations that work globally</li>\n      <li><strong>Geofencing:</strong> Boundary checks that don't break at meridians</li>\n      <li><strong>Data Quality:</strong> Detecting GPS outliers using proper spherical distance</li>\n    </ul>\n  </div>\n</div>\n\n",
    "assets": []
  },
  {
    "file": "16-arbitrary-wrap-points.html",
    "number": 9,
    "title": "When Zero Isn't Special: Arbitrary Wrap Points",
    "content": "<div class=\"slide\">\n    <h1>When Zero Isn't Special: Arbitrary Wrap Points</h1>\n    \n    <div class=\"warning-box\">\n        <h3>üéØ Real Hardware Doesn't Care About Zero</h3>\n        <p>Many circular quantities in the wild wrap at arbitrary values, not nice round numbers. The math still works‚Äîyou just need to normalize first!</p>\n    </div>\n    \n    <div class=\"two-column-equal\">\n        <div class=\"card\">\n            <h3>üìä Common Non-Zero Wrap Domains</h3>\n            <div class=\"example-list\">\n                <div class=\"example-item\">\n                    <h4>üß≠ Compass: [-180¬∞, +180¬∞)</h4>\n                    <p>Wraps at ¬±180¬∞, not 0¬∞/360¬∞</p>\n                    <code>bearing ‚àà [-180, 180)</code>\n                </div>\n                <div class=\"example-item\">\n                    <h4>üîß Rotary Encoder: [1000, 5096)</h4>\n                    <p>12-bit encoder with arbitrary offset</p>\n                    <code>counts ‚àà [1000, 5096)</code>\n                </div>\n                <div class=\"example-item\">\n                    <h4>üì° Phase: [-œÄ, +œÄ)</h4>\n                    <p>Centered around zero, not starting at it</p>\n                    <code>phase ‚àà [-œÄ, œÄ)</code>\n                </div>\n                <div class=\"example-item\">\n                    <h4>üóìÔ∏è Fiscal Year: [Apr, Mar]</h4>\n                    <p>Wraps at March/April boundary</p>\n                    <code>month ‚àà [4, 3] (mod 12)</code>\n                </div>\n                <div class=\"example-item\">\n                    <h4>üå°Ô∏è ADC Values: [512, 3584)</h4>\n                    <p>Sensor with DC offset and limited range</p>\n                    <code>adc ‚àà [512, 3584)</code>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"card\">\n            <h3>‚ú® The Universal Transform</h3>\n            <div class=\"formula-showcase\" style=\"background: rgba(76, 175, 80, 0.1); padding: 20px; border-radius: 8px; margin: 20px 0;\">\n                <h4>For any circular quantity:</h4>\n                <p><code>value ‚àà [min, max)</code></p>\n                <p style=\"margin: 15px 0;\">‚Üì</p>\n                <p><strong>1. Normalize to [0, 1):</strong></p>\n                <p><code>t = (value - min) / (max - min)</code></p>\n                <p style=\"margin: 15px 0;\">‚Üì</p>\n                <p><strong>2. Embed on unit circle:</strong></p>\n                <p><code>v = (cos(2œÄt), sin(2œÄt))</code></p>\n                <p style=\"margin: 15px 0;\">‚Üì</p>\n                <p><strong>3. Do your math in ‚Ñù¬≤</strong></p>\n                <p style=\"margin: 15px 0;\">‚Üì</p>\n                <p><strong>4. Project back if needed:</strong></p>\n                <p><code>result = min + (max-min) √ó atan2(v.y, v.x)/(2œÄ)</code></p>\n            </div>\n        </div>\n    </div>\n    \n    <div class=\"success-box\">\n        <h3>üíª Code Example: Averaging Compass Bearings</h3>\n        <div class=\"code-example\">\n            <pre><code class=\"language-python\"># PROBLEM: Compass uses [-180¬∞, +180¬∞) not [0¬∞, 360¬∞)\nbearings = [170, 175, -175, -170]  # All pointing roughly south\n\n# WRONG: Simple average\nnaive_mean = np.mean(bearings)  # = 0¬∞ (North!) ü§¶\n\n# RIGHT: Normalize ‚Üí Embed ‚Üí Average ‚Üí Denormalize\ndef circular_mean(values, min_val, max_val):\n    # Step 1: Normalize to [0, 1)\n    period = max_val - min_val\n    normalized = [(v - min_val) / period for v in values]\n    \n    # Step 2: Embed on circle\n    vectors = [(np.cos(2*np.pi*t), np.sin(2*np.pi*t)) for t in normalized]\n    \n    # Step 3: Average in vector space\n    mean_vector = np.mean(vectors, axis=0)\n    \n    # Step 4: Project back to original domain\n    angle = np.atan2(mean_vector[1], mean_vector[0])\n    result = min_val + (angle / (2*np.pi)) * period\n    if result < min_val:\n        result += period\n    return result\n\ncorrect_mean = circular_mean(bearings, -180, 180)  # ‚âà 175¬∞ South! ‚úÖ</code></pre>\n        </div>\n    </div>\n    \n    <div class=\"info-box\">\n        <h3>üîß Practical Examples</h3>\n        <div class=\"three-column\">\n            <div>\n                <h4>üéÆ Game Development</h4>\n                <div class=\"code-snippet\">\n                    <pre><code># Joystick angle ‚àà [-œÄ, œÄ]\njs_angle = atan2(js.y, js.x)\n# Don't compare directly!\n# Normalize first</code></pre>\n                </div>\n            </div>\n            <div>\n                <h4>ü§ñ Robotics</h4>\n                <div class=\"code-snippet\">\n                    <pre><code># Encoder wraps at 8192\n# but starts at 1000\nactual_pos = 1000 + \n  (raw - 1000) % 7192</code></pre>\n                </div>\n            </div>\n            <div>\n                <h4>üìä Time Series</h4>\n                <div class=\"code-snippet\">\n                    <pre><code># Fiscal quarters Q2-Q1\n# April = month 0\nfiscal_month = \n  (cal_month - 4) % 12</code></pre>\n                </div>\n            </div>\n        </div>\n    </div>\n    \n    <div class=\"highlight-box\">\n        <h3>üéØ Key Insight</h3>\n        <p style=\"font-size: 18px; text-align: center; margin: 20px 0;\">\n            <strong>The \"zero point\" is arbitrary!</strong> What matters is the <em>topology</em>‚Äîthat values wrap around.\n        </p>\n        <p style=\"text-align: center;\">\n            Always normalize to [0, 1) or [0, 2œÄ) before embedding. Your vector math doesn't care where the original wrap point was.\n        </p>\n    </div>\n</div>",
    "assets": []
  },
  {
    "file": "07-general-pattern.html",
    "number": 10,
    "title": "The General Pattern",
    "content": "<div class=\"slide\">\n    <h1>The General Pattern</h1>\n    \n    <div class=\"pattern-table\">\n        <h3>Any Circular Quantity Can Be Embedded!</h3>\n        <table>\n            <thead>\n                <tr>\n                    <th>Wraparound Quantity</th>\n                    <th>Traditional Problems</th>\n                    <th>Embedding Solution</th>\n                    <th>Benefits</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td><strong>Angle</strong><br>Œ∏ ‚àà [0, 2œÄ)</td>\n                    <td>Gimbal lock, discontinuities</td>\n                    <td>(cos Œ∏, sin Œ∏) ‚àà ‚Ñù¬≤</td>\n                    <td>Smooth interpolation</td>\n                </tr>\n                <tr>\n                    <td><strong>Time of Day</strong><br>t ‚àà [0, 24)</td>\n                    <td>Midnight wraparound</td>\n                    <td>(cos 2œÄt/24, sin 2œÄt/24)</td>\n                    <td>No special cases</td>\n                </tr>\n                <tr>\n                    <td><strong>Day of Week</strong><br>d ‚àà {0..6}</td>\n                    <td>Weekend averaging</td>\n                    <td>e^(2œÄid/7) or 7D one-hot</td>\n                    <td>Correct statistics</td>\n                </tr>\n                <tr>\n                    <td><strong>Phase</strong><br>œÜ ‚àà [-œÄ, œÄ)</td>\n                    <td>Phase unwrapping</td>\n                    <td>e^(iœÜ) ‚àà ‚ÑÇ</td>\n                    <td>Natural operations</td>\n                </tr>\n                <tr>\n                    <td><strong>Encoder Position</strong><br>n ‚àà [0, 4096)</td>\n                    <td>Rollover detection</td>\n                    <td>(cos 2œÄn/4096, sin 2œÄn/4096)</td>\n                    <td>Continuous tracking</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    \n    <div class=\"universal-class\">\n        <h3>One Class to Rule Them All</h3>\n        <pre><code class=\"language-python\">class CircularQuantity:\n    \"\"\"Universal handler for any quantity that wraps around\"\"\"\n    \n    def __init__(self, value, period):\n        self.period = period\n        self.value = value % period  # Normalize to [0, period)\n        \n        # THE KEY: Embed on unit circle\n        theta = 2 * np.pi * self.value / period\n        self.vec = np.array([np.cos(theta), np.sin(theta)])\n    \n    def shortest_distance_to(self, other):\n        \"\"\"Always returns shortest signed distance\"\"\"\n        angle = np.arctan2(\n            self.vec[0] * other.vec[1] - self.vec[1] * other.vec[0],\n            self.vec[0] * other.vec[0] + self.vec[1] * other.vec[1]\n        )\n        return angle * self.period / (2 * np.pi)\n    \n    def average_with(self, others):\n        \"\"\"Proper circular mean\"\"\"\n        all_vecs = [self.vec] + [o.vec for o in others]\n        mean_vec = np.mean(all_vecs, axis=0)\n        mean_vec /= np.linalg.norm(mean_vec)  # Renormalize\n        \n        angle = np.arctan2(mean_vec[1], mean_vec[0])\n        mean_value = angle * self.period / (2 * np.pi)\n        return CircularQuantity(mean_value, self.period)\n    \n    def interpolate_to(self, other, t):\n        \"\"\"Smooth interpolation along shortest path\"\"\"\n        # SLERP for perfect circular interpolation\n        dot = np.dot(self.vec, other.vec)\n        omega = np.arccos(np.clip(dot, -1, 1))\n        \n        if abs(omega) < 1e-10:  # Vectors are identical\n            return self\n        \n        vec_t = (np.sin((1-t)*omega)/np.sin(omega) * self.vec +\n                 np.sin(t*omega)/np.sin(omega) * other.vec)\n        \n        angle = np.arctan2(vec_t[1], vec_t[0])\n        value = angle * self.period / (2 * np.pi)\n        return CircularQuantity(value, self.period)</code></pre>\n    </div>\n    \n    <div class=\"examples-grid\">\n        <div class=\"example\">\n            <h4>üìê Angles</h4>\n            <pre><code>a1 = CircularQuantity(350, 360)\na2 = CircularQuantity(10, 360)\ndist = a1.shortest_distance_to(a2)\n# Result: 20¬∞</code></pre>\n        </div>\n        \n        <div class=\"example\">\n            <h4>‚è∞ Time</h4>\n            <pre><code>t1 = CircularQuantity(23.5, 24)\nt2 = CircularQuantity(0.5, 24)\navg = t1.average_with([t2])\n# Result: 0.0 (midnight)</code></pre>\n        </div>\n        \n        <div class=\"example\">\n            <h4>üìÖ Weekdays</h4>\n            <pre><code>days = [CircularQuantity(6, 7),  # Sat\n        CircularQuantity(0, 7),  # Sun\n        CircularQuantity(1, 7)]  # Mon\navg = days[0].average_with(days[1:])\n# Result: 0 (Sunday)</code></pre>\n        </div>\n        \n        <div class=\"example\">\n            <h4>üîÑ Encoder</h4>\n            <pre><code>e1 = CircularQuantity(4090, 4096)\ne2 = CircularQuantity(10, 4096)\ndelta = e1.shortest_distance_to(e2)\n# Result: 20 counts</code></pre>\n        </div>\n    </div>\n</div>\n\n",
    "assets": []
  },
  {
    "file": "08-mathematical-insight.html",
    "number": 11,
    "title": "The Mathematical Insight",
    "content": "<div class=\"slide\">\n    <h1>The Mathematical Insight</h1>\n    \n    <div class=\"info-box\">\n        <h3>Why Does This Work?</h3>\n        <div class=\"visual-demo\">\n            <svg width=\"600\" height=\"150\" viewBox=\"0 0 600 150\">\n                <!-- Line with endpoints -->\n                <g transform=\"translate(100, 75)\">\n                    <line x1=\"-60\" y1=\"0\" x2=\"60\" y2=\"0\" stroke=\"#333\" stroke-width=\"3\"/>\n                    <circle cx=\"-60\" cy=\"0\" r=\"6\" fill=\"#FF5722\"/>\n                    <circle cx=\"60\" cy=\"0\" r=\"6\" fill=\"#FF5722\"/>\n                    <text x=\"0\" y=\"30\" text-anchor=\"middle\" font-size=\"14\" fill=\"#FFC107\">Line has endpoints</text>\n                </g>\n                \n                <!-- vs -->\n                <text x=\"300\" y=\"80\" text-anchor=\"middle\" font-size=\"20\" fill=\"#FFC107\">vs</text>\n                \n                <!-- Circle -->\n                <g transform=\"translate(500, 40)\">\n                    <circle cx=\"0\" cy=\"0\" r=\"50\" fill=\"none\" stroke=\"#333\" stroke-width=\"3\"/>\n                    <text x=\"0\" y=\"70\" text-anchor=\"middle\" font-size=\"14\" fill=\"#FFC107\">Circle has none!</text>\n                </g>\n            </svg>\n        </div>\n        <p class=\"text-center\">A circle (S¬π) is topologically different from a line segment. Linear math breaks at the wraparound point.</p>\n    </div>\n    \n    <div class=\"two-column-equal\">\n        <div class=\"card\">\n            <h3>üåê The Circle Problem</h3>\n            <ul>\n                <li><strong>Circles have no \"beginning\" or \"end\"</strong></li>\n                <li>359¬∞ and 1¬∞ are neighbors</li>\n                <li>But arithmetic says 359 - 1 = 358 ü§¶</li>\n                <li>‚Üí Solution: Use 2D vectors instead!</li>\n            </ul>\n        </div>\n        \n        <div class=\"card\">\n            <h3>üîÑ The Wrapping Function</h3>\n            <svg width=\"300\" height=\"120\" viewBox=\"0 0 300 120\">\n                <path d=\"M 20 80 Q 70 20, 120 80 T 220 80 T 280 80\" stroke=\"#2196F3\" stroke-width=\"3\" fill=\"none\"/>\n                <text x=\"50\" y=\"60\" text-anchor=\"middle\" font-size=\"12\" fill=\"#FFC107\">0¬∞</text>\n                <text x=\"120\" y=\"60\" text-anchor=\"middle\" font-size=\"12\" fill=\"#FFC107\">360¬∞</text>\n                <text x=\"190\" y=\"60\" text-anchor=\"middle\" font-size=\"12\" fill=\"#FFC107\">720¬∞</text>\n                <text x=\"260\" y=\"60\" text-anchor=\"middle\" font-size=\"12\" fill=\"#FFC107\">1080¬∞</text>\n            </svg>\n            <p>Angles wrap around: 370¬∞ = 10¬∞, 730¬∞ = 10¬∞, etc. The infinite line wraps onto the finite circle.</p>\n        </div>\n    </div>\n    \n    <div class=\"success-box\">\n        <h3>üîë The Universal Pattern</h3>\n        <div class=\"process-flow\">\n            <div class=\"process-step\">\n                <h4>Problem Space</h4>\n                <p>Non-linear manifold</p>\n                <small>(circle, sphere, torus)</small>\n            </div>\n            <div class=\"process-step\">\n                <h4>Embedding</h4>\n                <p>Lift to linear space</p>\n                <small>(‚Ñù¬≤, ‚Ñù¬≥, ‚ÑÇ)</small>\n            </div>\n            <div class=\"process-step\">\n                <h4>Computation</h4>\n                <p>Do linear algebra</p>\n                <small>(add, average, interpolate)</small>\n            </div>\n            <div class=\"process-step\">\n                <h4>Projection</h4>\n                <p>Map back to manifold</p>\n                <small>(atan2, normalize)</small>\n            </div>\n        </div>\n    </div>\n    \n    <div class=\"two-column\">\n        <div class=\"warning-box\">\n            <h3>üéØ Where Else This Appears</h3>\n            <ul>\n                <li><strong>Quaternions:</strong> 3D rotations in 4D space</li>\n                <li><strong>Complex Numbers:</strong> 2D rotations in ‚ÑÇ</li>\n                <li><strong>Fourier Transform:</strong> Signals on unit circle</li>\n                <li><strong>Neural Networks:</strong> Learned embeddings</li>\n            </ul>\n        </div>\n        \n        <div class=\"highlight-box\">\n            <h3>üí≠ Mathematical Insight</h3>\n            <blockquote style=\"font-style: italic; margin: 10px 0;\">\n                \"The introduction of numbers as coordinates is an act of violence.\"\n                <br><cite style=\"font-size: 14px;\">‚Äî Hermann Weyl</cite>\n            </blockquote>\n            <p><strong>But sometimes, the right coordinates make the violence worthwhile!</strong></p>\n        </div>\n    </div>\n</div>\n\n",
    "assets": []
  },
  {
    "file": "04-the-solution.html",
    "number": 12,
    "title": "The Missing Math Class: Circular Operations",
    "content": "<div class=\"slide\">\n    <h1>The Missing Math Class: Circular Operations</h1>\n    \n    <div class=\"warning-box\">\n        <h3>ü§Ø What They Never Taught You</h3>\n        <p>Circular quantities are everywhere, but traditional math classes skip the operations entirely! Here's what you can actually <strong>do</strong> once you embed them as vectors:</p>\n    </div>\n    \n    <div class=\"two-column-equal\">\n        <div class=\"card\">\n            <h3>üìä Basic Operations</h3>\n            <div class=\"operation-list\">\n                <div class=\"op-item\">\n                    <strong>Addition:</strong> <code>v‚ÇÅ + v‚ÇÇ</code><br>\n                    <small>Compose two rotations</small>\n                </div>\n                <div class=\"op-item\">\n                    <strong>Subtraction:</strong> <code>v‚ÇÅ - v‚ÇÇ</code><br>\n                    <small>Find angular difference</small>\n                </div>\n                <div class=\"op-item\">\n                    <strong>Average:</strong> <code>mean(vectors)</code><br>\n                    <small>Circular mean (always works!)</small>\n                </div>\n                <div class=\"op-item\">\n                    <strong>Interpolation:</strong> <code>slerp(v‚ÇÅ, v‚ÇÇ, t)</code><br>\n                    <small>Smooth rotation between angles</small>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"card\">\n            <h3>üßÆ Advanced Operations</h3>\n            <div class=\"operation-list\">\n                <div class=\"op-item\">\n                    <strong>Distance:</strong> <code>shortest_path(Œ∏‚ÇÅ, Œ∏‚ÇÇ)</code><br>\n                    <small>Minimal angular separation</small>\n                </div>\n                <div class=\"op-item\">\n                    <strong>Scaling:</strong> <code>scalar √ó vector</code><br>\n                    <small>Scale magnitude, preserve direction</small>\n                </div>\n                <div class=\"op-item\">\n                    <strong>Derivatives:</strong> <code>d/dt [cos(œât), sin(œât)]</code><br>\n                    <small>Angular velocity vectors</small>\n                </div>\n                <div class=\"op-item\">\n                    <strong>Integration:</strong> <code>‚à´ œâ(t) dt</code><br>\n                    <small>Accumulate rotations over time</small>\n                </div>\n            </div>\n        </div>\n    </div>\n    \n    <div class=\"success-box\">\n        <h3>üìà Circular Statistics (The Really Cool Stuff)</h3>\n        <div class=\"code-example\">\n            <pre><code class=\"language-python\"># Operations that actually work on circular data!\nangles = [350¬∞, 10¬∞, 5¬∞, 355¬∞]  # Wind directions\nvectors = [to_vector(Œ∏) for Œ∏ in angles]\n\n# Circular mean (not 180¬∞!)\nmean_vector = np.mean(vectors, axis=0) \nmean_angle = from_vector(mean_vector)  # ‚âà 0¬∞\n\n# Circular standard deviation  \ndispersion = 1 - |mean_vector|  # How \"spread out\" are they?\n\n# Circular correlation\ncorrelation = correlate_circular(wind_dir, wave_dir)\n\n# Circular regression (yes, this exists!)\nslope, intercept = circular_regression(time, wave_directions)</code></pre>\n        </div>\n    </div>\n    \n    <div class=\"info-box\">\n        <h3>üéØ Why This Matters</h3>\n        <div class=\"three-column\">\n            <div>\n                <h4>üåä Oceanography</h4>\n                <p>Wave directions, current flows</p>\n            </div>\n            <div>\n                <h4>üß≠ Navigation</h4>\n                <p>GPS, compass bearings, flight paths</p>\n            </div>\n            <div>\n                <h4>üß¨ Biology</h4>\n                <p>Circadian rhythms, animal migration</p>\n            </div>\n            <div>\n                <h4>üéµ Signal Processing</h4>\n                <p>Phase analysis, Fourier transforms</p>\n            </div>\n            <div>\n                <h4>ü§ñ Robotics</h4>\n                <p>Joint angles, orientation control</p>\n            </div>\n            <div>\n                <h4>üìä Data Science</h4>\n                <p>Seasonal trends, cyclic patterns</p>\n            </div>\n        </div>\n    </div>\n    \n    <div class=\"highlight-box\">\n        <h3>üí° The Big Insight</h3>\n        <p><strong>Every operation you know from linear algebra works on circular quantities‚Äîyou just need to embed them first!</strong> This is why embedding is such a powerful mathematical technique.</p>\n        <div class=\"formula-showcase\">\n            <code>Circular Quantity ‚Üí Vector ‚Üí Linear Operation ‚Üí Vector ‚Üí Circular Result</code>\n        </div>\n    </div>\n</div>",
    "assets": []
  },
  {
    "file": "13-circular-statistics.html",
    "number": 13,
    "title": "Circular Statistics: The Hidden Superpower",
    "content": "<div class=\"slide\">\n    <h1>Circular Statistics: The Hidden Superpower</h1>\n    \n    <div class=\"warning-box\">\n        <h3>ü§Ø What Statistics Class Never Taught You</h3>\n        <p>Standard statistics breaks horribly on circular data. But vector embedding makes circular statistics <strong>trivially easy</strong>‚Äîand incredibly powerful!</p>\n    </div>\n    \n    <div class=\"two-column-equal\">\n        <div class=\"card\">\n            <h3>üìä The Problem with Regular Stats</h3>\n            <div class=\"code-example\">\n                <pre><code class=\"language-python\"># Wind directions (degrees)\nangles = [350, 10, 5, 355]\n\n# Regular mean = DISASTER\nmean = sum(angles) / len(angles)  # = 180¬∞\n# 180¬∞ is the OPPOSITE direction! ü§¶‚Äç‚ôÇÔ∏è\n\n# Regular standard deviation = MEANINGLESS\nstd = numpy.std(angles)  # = 187¬∞\n# Standard deviation larger than the range!</code></pre>\n            </div>\n        </div>\n        \n        <div class=\"card\">\n            <h3>‚ú® Vector Statistics = Magic</h3>\n            <div class=\"code-example\">\n                <pre><code class=\"language-python\"># Convert to vectors\nvectors = [angle_to_vector(Œ∏) for Œ∏ in angles]\n\n# Circular mean = WORKS!\nmean_vector = np.mean(vectors, axis=0)\nmean_angle = vector_to_angle(mean_vector)  # ‚âà 0¬∞\n# Correct direction! üéØ\n\n# Circular standard deviation\nR = |mean_vector|  # Mean vector length\ncircular_std = sqrt(-2 * log(R))  # ‚âà 22¬∞\n# Sensible measure of spread!</code></pre>\n            </div>\n        </div>\n    </div>\n    \n    <div class=\"info-box\">\n        <h3>üß† The Key Insight: Mean Vector Length</h3>\n        <div class=\"two-column\">\n            <div class=\"visual-element\">\n                <svg width=\"300\" height=\"200\" viewBox=\"0 0 300 200\">\n                    <!-- Tight cluster -->\n                    <g transform=\"translate(75, 100)\">\n                        <circle r=\"50\" fill=\"none\" stroke=\"#666\" stroke-width=\"1\" opacity=\"0.3\"/>\n                        <!-- Data points clustered tightly -->\n                        <circle cx=\"45\" cy=\"5\" r=\"4\" fill=\"#4CAF50\"/>\n                        <circle cx=\"47\" cy=\"-3\" r=\"4\" fill=\"#4CAF50\"/>\n                        <circle cx=\"43\" cy=\"3\" r=\"4\" fill=\"#4CAF50\"/>\n                        <circle cx=\"46\" cy=\"0\" r=\"4\" fill=\"#4CAF50\"/>\n                        <!-- Strong mean vector -->\n                        <path d=\"M 0 0 L 40 0\" stroke=\"#FF5722\" stroke-width=\"4\" marker-end=\"url(#arrow)\"/>\n                        <text x=\"0\" y=\"-65\" text-anchor=\"middle\" fill=\"#4CAF50\" font-size=\"12\">Tight Cluster</text>\n                        <text x=\"0\" y=\"75\" text-anchor=\"middle\" fill=\"#FF5722\" font-size=\"11\">|R| ‚âà 0.95</text>\n                        <text x=\"0\" y=\"87\" text-anchor=\"middle\" fill=\"#666\" font-size=\"10\">Low variance</text>\n                    </g>\n                    \n                    <!-- Spread out data -->\n                    <g transform=\"translate(225, 100)\">\n                        <circle r=\"50\" fill=\"none\" stroke=\"#666\" stroke-width=\"1\" opacity=\"0.3\"/>\n                        <!-- Data points spread out -->\n                        <circle cx=\"45\" cy=\"5\" r=\"4\" fill=\"#2196F3\"/>\n                        <circle cx=\"-30\" cy=\"35\" r=\"4\" fill=\"#2196F3\"/>\n                        <circle cx=\"-15\" cy=\"-45\" r=\"4\" fill=\"#2196F3\"/>\n                        <circle cx=\"20\" cy=\"-40\" r=\"4\" fill=\"#2196F3\"/>\n                        <!-- Weak mean vector -->\n                        <path d=\"M 0 0 L 8 -5\" stroke=\"#FF5722\" stroke-width=\"4\" marker-end=\"url(#arrow)\"/>\n                        <text x=\"0\" y=\"-65\" text-anchor=\"middle\" fill=\"#2196F3\" font-size=\"12\">Spread Out</text>\n                        <text x=\"0\" y=\"75\" text-anchor=\"middle\" fill=\"#FF5722\" font-size=\"11\">|R| ‚âà 0.1</text>\n                        <text x=\"0\" y=\"87\" text-anchor=\"middle\" fill=\"#666\" font-size=\"10\">High variance</text>\n                    </g>\n                    \n                    <defs>\n                        <marker id=\"arrow\" markerWidth=\"10\" markerHeight=\"7\" refX=\"10\" refY=\"3.5\" orient=\"auto\">\n                            <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"#FF5722\"/>\n                        </marker>\n                    </defs>\n                </svg>\n            </div>\n            <div>\n                <h4>üí° The Beautiful Truth</h4>\n                <div class=\"formula-showcase\">\n                    <p><strong>Tight cluster:</strong> Mean vector is long (|R| ‚Üí 1)</p>\n                    <p><strong>Spread out:</strong> Mean vector is short (|R| ‚Üí 0)</p>\n                    <p><strong>Uniform circle:</strong> Mean vector ‚âà 0</p>\n                </div>\n                <p>The length of the mean vector automatically captures how \"concentrated\" your circular data is!</p>\n            </div>\n        </div>\n    </div>\n    \n    <div class=\"success-box\">\n        <h3>üî¨ Advanced Circular Stats That Actually Work</h3>\n        <div class=\"code-example\">\n            <pre><code class=\"language-python\"># Circular correlation between two angular variables\ndef circular_correlation(angles1, angles2):\n    v1 = [angle_to_vector(Œ∏) for Œ∏ in angles1]\n    v2 = [angle_to_vector(Œ∏) for Œ∏ in angles2]\n    # Standard correlation on the vector components\n    return pearsonr(v1, v2)\n\n# Circular regression (yes, this exists!)\ndef circular_regression(x, circular_y):\n    vectors_y = [angle_to_vector(Œ∏) for Œ∏ in circular_y]\n    # Regress each component separately\n    cos_model = LinearRegression().fit(x, [v[0] for v in vectors_y])\n    sin_model = LinearRegression().fit(x, [v[1] for v in vectors_y])\n    return cos_model, sin_model\n\n# Watson-Williams test (circular ANOVA)\n# Test if multiple groups have the same mean direction\ndef watson_williams_test(group1_angles, group2_angles):\n    # Convert to vectors, compute mean directions, test significance\n    # (This is the circular equivalent of a t-test!)</code></pre>\n        </div>\n    </div>\n    \n    <div class=\"highlight-box\">\n        <h3>üåü Real-World Applications</h3>\n        <div class=\"three-column\">\n            <div>\n                <h4>üß¨ Biology</h4>\n                <p><strong>Animal migration:</strong> Test if birds change direction by season</p>\n                <p><strong>Circadian rhythms:</strong> Correlate activity with time of day</p>\n            </div>\n            <div>\n                <h4>üåä Earth Sciences</h4>\n                <p><strong>Wind patterns:</strong> Seasonal wind direction changes</p>\n                <p><strong>Ocean currents:</strong> Correlation with tidal cycles</p>\n            </div>\n            <div>\n                <h4>üéµ Signal Processing</h4>\n                <p><strong>Phase analysis:</strong> Correlation between signal phases</p>\n                <p><strong>Circular convolution:</strong> Periodic signal filtering</p>\n            </div>\n        </div>\n    </div>\n</div>",
    "assets": []
  },
  {
    "file": "14-discrete-calculus.html",
    "number": 14,
    "title": "Discrete Calculus on Circles: Data-Driven Operations",
    "content": "<div class=\"slide\">\n    <h1>Discrete Calculus on Circles: Data-Driven Operations</h1>\n    \n    <div class=\"info-box\">\n        <h3>üìä Real-World Data = Discrete Samples</h3>\n        <p>In practice, we don't have continuous functions‚Äîwe have <strong>time series data</strong> of circular quantities. How do we compute derivatives and integrals when our data wraps around?</p>\n    </div>\n    \n    <div class=\"two-column-equal\">\n        <div class=\"card\">\n            <h3>üìà Discrete Derivatives (Angular Velocity)</h3>\n            <div class=\"code-example\">\n                <pre><code class=\"language-python\"># WRONG: Naive difference breaks at wraparound\nangles = [358¬∞, 359¬∞, 1¬∞, 2¬∞]  # Smooth rotation\nnaive_diff = [1¬∞, 2¬∞, -357¬∞]  # HUGE SPIKE! üí•\n\n# RIGHT: Vector space derivative\nvectors = [(cos(Œ∏), sin(Œ∏)) for Œ∏ in angles]\ndvdt = [(v[i+1] - v[i])/dt for i in range(len(v)-1)]\n\n# Angular velocity from vector derivative\nœâ = cross_product(v[i], dvdt[i]) / |v[i]|¬≤\n# Result: [1¬∞/s, 1¬∞/s, 1¬∞/s] ‚úÖ</code></pre>\n            </div>\n        </div>\n        \n        <div class=\"card\">\n            <h3>üìâ Discrete Integrals (Accumulated Rotation)</h3>\n            <div class=\"code-example\">\n                <pre><code class=\"language-python\"># WRONG: Sum angles directly\nangular_velocities = [90¬∞/s, 90¬∞/s, 90¬∞/s, 90¬∞/s]\nnaive_sum = sum(angular_velocities) * dt  # 360¬∞???\n\n# RIGHT: Accumulate in vector space\nv_accumulated = [1, 0]  # Start at 0¬∞\nfor œâ in angular_velocities:\n    # Rotate vector by angular increment\n    dŒ∏ = œâ * dt\n    rotation = [[cos(dŒ∏), -sin(dŒ∏)],\n                [sin(dŒ∏), cos(dŒ∏)]]\n    v_accumulated = rotation @ v_accumulated\n\nfinal_angle = atan2(v_accumulated)  # Correct!</code></pre>\n            </div>\n        </div>\n    </div>\n    \n    <div class=\"success-box\">\n        <h3>üîß Practical Applications in Data Science</h3>\n        <div class=\"two-column\">\n            <div>\n                <h4>üåä Wind Speed Analysis</h4>\n                <div class=\"code-example\">\n                    <pre><code class=\"language-python\"># Wind direction time series (sampled every hour)\nwind_dirs = [350¬∞, 355¬∞, 0¬∞, 5¬∞, 10¬∞]  # North-ish\nwind_speeds = [10, 12, 15, 14, 11]  # mph\n\n# Compute wind vector components\nu = [-speed * sin(dir) for speed, dir in zip(wind_speeds, wind_dirs)]\nv = [-speed * cos(dir) for speed, dir in zip(wind_speeds, wind_dirs)]\n\n# Now can compute proper derivatives!\ndu_dt = np.gradient(u)  # Wind acceleration (east)\ndv_dt = np.gradient(v)  # Wind acceleration (north)</code></pre>\n                </div>\n            </div>\n            <div>\n                <h4>ü§ñ Robot Heading Tracking</h4>\n                <div class=\"code-example\">\n                    <pre><code class=\"language-python\"># IMU gives heading samples at 100Hz\nheadings = sensor.get_heading_buffer()  # [Œ∏‚ÇÅ, Œ∏‚ÇÇ, ..., Œ∏‚Çô]\ndt = 0.01  # 10ms between samples\n\n# Convert to unit vectors\nvectors = [(cos(h), sin(h)) for h in headings]\n\n# Compute angular velocity using discrete derivative\nangular_vel = []\nfor i in range(len(vectors)-1):\n    # Cross product gives rotation rate\n    œâ = (vectors[i][0]*vectors[i+1][1] - \n         vectors[i][1]*vectors[i+1][0]) / dt\n    angular_vel.append(œâ)\n\n# Smooth using windowed average (no wraparound issues!)\nsmoothed_œâ = moving_average(angular_vel, window=10)</code></pre>\n                </div>\n            </div>\n        </div>\n    </div>\n    \n    <div class=\"warning-box\">\n        <h3>‚ö†Ô∏è Common Pitfalls with Discrete Circular Data</h3>\n        <div class=\"three-column\">\n            <div>\n                <h4>‚ùå Phase Unwrapping</h4>\n                <p><code>unwrap([350¬∞, 10¬∞])</code> ‚Üí <code>[350¬∞, 370¬∞]</code></p>\n                <p>Creates artificial trends! Use vectors instead.</p>\n            </div>\n            <div>\n                <h4>‚ùå Modulo Arithmetic</h4>\n                <p><code>(Œ∏‚ÇÇ - Œ∏‚ÇÅ) % 360</code></p>\n                <p>Loses direction info. Vector difference preserves it.</p>\n            </div>\n            <div>\n                <h4>‚ùå Averaging Raw Angles</h4>\n                <p><code>mean([0¬∞, 90¬∞, 180¬∞, 270¬∞])</code> ‚Üí <code>135¬∞</code></p>\n                <p>Should be undefined! Vector mean ‚Üí 0.</p>\n            </div>\n        </div>\n    </div>\n    \n    <div class=\"highlight-box\">\n        <h3>üéØ The Key Pattern for Discrete Operations</h3>\n        <div class=\"formula-showcase\">\n            <div style=\"text-align: center; padding: 20px;\">\n                <p style=\"font-size: 18px; margin: 10px 0;\">\n                    <strong>Discrete Samples</strong> ‚Üí <strong>Vector Time Series</strong> ‚Üí <strong>Standard Numpy Operations</strong> ‚Üí <strong>Interpret Results</strong>\n                </p>\n                <p style=\"margin-top: 20px;\">\n                    <code>Œ∏[t]</code> ‚Üí <code>[cos(Œ∏[t]), sin(Œ∏[t])]</code> ‚Üí <code>np.gradient(), np.cumsum()</code> ‚Üí <code>atan2() if needed</code>\n                </p>\n            </div>\n        </div>\n        <p><strong>Bottom Line:</strong> NumPy/Pandas operations \"just work\" on vector representations‚Äîno special circular functions needed!</p>\n    </div>\n</div>",
    "assets": []
  },
  {
    "file": "18-flight-photo-window.html",
    "number": 15,
    "title": "Untitled Slide",
    "content": "<div class=\"slide flight-photo\">\n  <style>\n    .flight-photo {\n      padding: 2.5vh 3vw;\n      display: flex;\n      flex-direction: column;\n      gap: 2vh;\n    }\n\n    .flight-photo h2 {\n      text-align: center;\n      margin-bottom: 1vh;\n      background: linear-gradient(135deg, #ff6b6b, #4ecdc4);\n      -webkit-background-clip: text;\n      background-clip: text;\n      color: transparent;\n      font-size: clamp(24px, 3.5vw, 42px);\n    }\n\n    .bottom-hint {\n      margin-top: 2vh;\n      text-align: center;\n    }\n\n    .hint-button {\n      background: rgba(255, 255, 255, 0.06);\n      color: #f0f6fc;\n      border: 1px solid rgba(255, 255, 255, 0.12);\n      border-radius: 10px;\n      padding: 8px 12px;\n      font-weight: 600;\n      font-size: 0.9em;\n      cursor: pointer;\n      transition: all 0.3s;\n      opacity: 0.7;\n    }\n\n    .hint-button:hover {\n      background: rgba(255, 255, 255, 0.12);\n      transform: translateY(-2px);\n      opacity: 1;\n    }\n\n    .hint-content {\n      margin-top: 1vh;\n      padding: 1vh 1.5vw;\n      background: rgba(255, 255, 255, 0.03);\n      border: 1px solid rgba(255, 255, 255, 0.1);\n      border-radius: 8px;\n      color: #f0f6fc;\n      line-height: 1.5;\n      font-size: 0.85em;\n      text-align: left;\n      max-width: 500px;\n      margin-left: auto;\n      margin-right: auto;\n    }\n\n    .hint-content ul {\n      margin: 0.5vh 0;\n      padding-left: 2em;\n    }\n\n    .method-difference {\n      background: rgba(255, 87, 34, 0.15);\n      border: 2px solid rgba(255, 87, 34, 0.5);\n      border-radius: 8px;\n      padding: 1.5vh 1.5vw;\n      margin-top: 1.5vh;\n      animation: pulse 2s ease-in-out infinite;\n    }\n\n    @keyframes pulse {\n      0%,\n      100% {\n        opacity: 1;\n      }\n      50% {\n        opacity: 0.9;\n      }\n    }\n\n    .method-difference h4 {\n      margin: 0 0 0.5vh 0;\n      color: #ff5722;\n      font-size: 1.1em;\n    }\n\n    .method-difference p {\n      margin: 0;\n      color: #f0f6fc;\n      line-height: 1.4;\n    }\n\n    .main-grid {\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      gap: 2vw;\n      flex: 1;\n    }\n\n    .panel {\n      background: rgba(255, 255, 255, 0.03);\n      border-radius: 12px;\n      padding: 2vh 2vw;\n      border: 1px solid rgba(255, 255, 255, 0.1);\n      display: flex;\n      flex-direction: column;\n      gap: 1.5vh;\n      position: relative;\n    }\n\n    .panel h3 {\n      margin: 0;\n      color: #4ecdc4;\n      font-size: 1.2em;\n    }\n\n    .controls {\n      display: flex;\n      flex-direction: column;\n      gap: 1vh;\n    }\n\n    .control-row {\n      display: flex;\n      align-items: center;\n      gap: 1vw;\n    }\n\n    .control-row label {\n      flex: 0 0 120px;\n      font-size: 0.85em;\n      color: #f0f6fc;\n    }\n\n    .control-row input[type=\"range\"] {\n      flex: 1;\n      background: rgba(255, 255, 255, 0.1);\n      outline: none;\n      height: 6px;\n      border-radius: 3px;\n      cursor: pointer;\n    }\n\n    .control-row .value {\n      flex: 0 0 80px;\n      text-align: right;\n      font-family: monospace;\n      color: #4ecdc4;\n      font-weight: bold;\n    }\n\n    .clock-container {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      flex: 1;\n      gap: 1vw;\n      margin: 2vh 0;\n    }\n\n    .clock-viz {\n      text-align: center;\n    }\n\n    .clock-viz svg {\n      width: 320px;\n      height: 320px;\n    }\n\n    .clock-label {\n      font-size: 0.85em;\n      color: #7d8590;\n      margin-top: 0.5vh;\n    }\n\n    .vector-viz {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      flex: 1;\n      min-height: 300px;\n    }\n\n    .vector-viz svg {\n      width: 100%;\n      height: 100%;\n      min-height: 350px;\n      max-height: 450px;\n    }\n\n    .time-toggle {\n      position: absolute;\n      top: 2vh;\n      right: 2vw;\n      background: rgba(255, 255, 255, 0.06);\n      color: #f0f6fc;\n      border: 1px solid rgba(255, 255, 255, 0.12);\n      border-radius: 6px;\n      padding: 6px 12px;\n      font-size: 0.85em;\n      cursor: pointer;\n      transition: all 0.2s;\n      z-index: 10;\n    }\n\n    .time-toggle:hover {\n      background: rgba(255, 255, 255, 0.12);\n    }\n\n    .flight-span-label {\n      text-align: center;\n      font-size: 0.9em;\n      color: #FFC107;\n      font-weight: bold;\n      margin-top: -1vh;\n    }\n\n    .results {\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      gap: 1vw;\n      margin-top: 1vh;\n    }\n\n    .result-card {\n      background: rgba(255, 255, 255, 0.02);\n      border-radius: 8px;\n      padding: 1vh 1vw;\n      border: 1px solid rgba(255, 255, 255, 0.1);\n    }\n\n    .result-card.good {\n      border-color: #4caf50;\n      background: rgba(76, 175, 80, 0.1);\n    }\n\n    .result-card.bad {\n      border-color: #ff5722;\n      background: rgba(255, 87, 34, 0.1);\n    }\n\n    .result-label {\n      font-size: 0.8em;\n      color: #7d8590;\n      margin-bottom: 0.3vh;\n    }\n\n    .result-value {\n      font-size: 1.1em;\n      font-weight: bold;\n    }\n\n    .photo-windows {\n      position: absolute;\n      inset: 0;\n      pointer-events: none;\n    }\n\n    .explanation {\n      background: rgba(78, 205, 196, 0.1);\n      border: 1px solid rgba(78, 205, 196, 0.3);\n      border-radius: 8px;\n      padding: 1vh 1.5vw;\n      margin-top: 1vh;\n      font-size: 0.9em;\n      line-height: 1.4;\n    }\n\n    .explanation strong {\n      color: #4ecdc4;\n    }\n  </style>\n\n  <h2>üõ©Ô∏è Aerial Photography: Finding Optimal Light Windows</h2>\n\n  <div class=\"main-grid\">\n    <div class=\"panel\">\n      <h3>Flight Parameters</h3>\n\n      <div class=\"controls\">\n        <div class=\"control-row\">\n          <label>Departure (Local):</label>\n          <input\n            type=\"range\"\n            id=\"departure-time\"\n            min=\"0\"\n            max=\"23.75\"\n            step=\"0.25\"\n            value=\"6\"\n          />\n          <span class=\"value\" id=\"departure-value\">06:00</span>\n        </div>\n\n        <div class=\"control-row\">\n          <label>Flight Duration:</label>\n          <input\n            type=\"range\"\n            id=\"flight-duration\"\n            min=\"1\"\n            max=\"12\"\n            step=\"0.5\"\n            value=\"5\"\n          />\n          <span class=\"value\" id=\"duration-value\">5.0h</span>\n        </div>\n\n        <div class=\"control-row\">\n          <label>Timezones Crossed:</label>\n          <input\n            type=\"range\"\n            id=\"timezones\"\n            min=\"-12\"\n            max=\"12\"\n            step=\"1\"\n            value=\"3\"\n          />\n          <span class=\"value\" id=\"timezone-value\">+3h</span>\n        </div>\n      </div>\n\n      <div class=\"clock-container\">\n        <div class=\"clock-viz\">\n          <svg id=\"departure-clock\" viewBox=\"0 0 200 200\">\n            <circle\n              cx=\"100\"\n              cy=\"100\"\n              r=\"80\"\n              fill=\"none\"\n              stroke=\"#333\"\n              stroke-width=\"2\"\n            />\n            <g class=\"photo-windows\"></g>\n            <line\n              id=\"dep-hand\"\n              x1=\"100\"\n              y1=\"100\"\n              x2=\"100\"\n              y2=\"30\"\n              stroke=\"#2196F3\"\n              stroke-width=\"4\"\n              stroke-linecap=\"round\"\n            />\n            <circle cx=\"100\" cy=\"100\" r=\"5\" fill=\"#fff\" />\n            <text\n              x=\"100\"\n              y=\"10\"\n              text-anchor=\"middle\"\n              fill=\"#7d8590\"\n              font-size=\"12\"\n            >\n              00\n            </text>\n            <text\n              x=\"180\"\n              y=\"105\"\n              text-anchor=\"middle\"\n              fill=\"#7d8590\"\n              font-size=\"12\"\n            >\n              06\n            </text>\n            <text\n              x=\"100\"\n              y=\"195\"\n              text-anchor=\"middle\"\n              fill=\"#7d8590\"\n              font-size=\"12\"\n            >\n              12\n            </text>\n            <text\n              x=\"20\"\n              y=\"105\"\n              text-anchor=\"middle\"\n              fill=\"#7d8590\"\n              font-size=\"12\"\n            >\n              18\n            </text>\n          </svg>\n          <div class=\"clock-label\">Departure</div>\n        </div>\n\n        <div class=\"clock-viz\">\n          <svg id=\"arrival-clock\" viewBox=\"0 0 200 200\">\n            <circle\n              cx=\"100\"\n              cy=\"100\"\n              r=\"80\"\n              fill=\"none\"\n              stroke=\"#333\"\n              stroke-width=\"2\"\n            />\n            <g class=\"photo-windows\"></g>\n            <line\n              id=\"arr-hand\"\n              x1=\"100\"\n              y1=\"100\"\n              x2=\"100\"\n              y2=\"30\"\n              stroke=\"#4CAF50\"\n              stroke-width=\"4\"\n              stroke-linecap=\"round\"\n            />\n            <circle cx=\"100\" cy=\"100\" r=\"5\" fill=\"#fff\" />\n            <text\n              x=\"100\"\n              y=\"10\"\n              text-anchor=\"middle\"\n              fill=\"#7d8590\"\n              font-size=\"12\"\n            >\n              00\n            </text>\n            <text\n              x=\"180\"\n              y=\"105\"\n              text-anchor=\"middle\"\n              fill=\"#7d8590\"\n              font-size=\"12\"\n            >\n              06\n            </text>\n            <text\n              x=\"100\"\n              y=\"195\"\n              text-anchor=\"middle\"\n              fill=\"#7d8590\"\n              font-size=\"12\"\n            >\n              12\n            </text>\n            <text\n              x=\"20\"\n              y=\"105\"\n              text-anchor=\"middle\"\n              fill=\"#7d8590\"\n              font-size=\"12\"\n            >\n              18\n            </text>\n          </svg>\n          <div class=\"clock-label\">Arrival (Local)</div>\n        </div>\n      </div>\n\n      <div class=\"explanation\">\n        <strong>Photo Windows:</strong> <span style=\"color: #FF9800;\">Morning golden hour (9-11 AM)</span> and\n        <span style=\"color: #2196F3;\">afternoon window (2-4 PM)</span> shown as colored arcs.\n        <span id=\"explanation-text\"\n          >Drag sliders to see how each method chooses a photo window.</span\n        >\n      </div>\n    </div>\n\n    <div class=\"panel\">\n      <h3>Vector Embedding Space</h3>\n\n      <button class=\"time-toggle\" id=\"time-toggle\">\n        24h\n      </button>\n\n      <div class=\"vector-viz\">\n        <svg id=\"vector-space\" viewBox=\"0 0 400 400\">\n          <!-- Unit circle -->\n          <circle\n            cx=\"200\"\n            cy=\"200\"\n            r=\"150\"\n            fill=\"none\"\n            stroke=\"#333\"\n            stroke-width=\"1\"\n            stroke-dasharray=\"2,2\"\n            opacity=\"0.5\"\n          />\n\n          <!-- Axes -->\n          <line\n            x1=\"50\"\n            y1=\"200\"\n            x2=\"350\"\n            y2=\"200\"\n            stroke=\"#333\"\n            stroke-width=\"1\"\n            opacity=\"0.3\"\n          />\n          <line\n            x1=\"200\"\n            y1=\"50\"\n            x2=\"200\"\n            y2=\"350\"\n            stroke=\"#333\"\n            stroke-width=\"1\"\n            opacity=\"0.3\"\n          />\n\n          <!-- Time labels -->\n          <text id=\"label-north\" x=\"200\" y=\"35\" text-anchor=\"middle\" fill=\"#7d8590\" font-size=\"14\">00:00</text>\n          <text id=\"label-east\" x=\"365\" y=\"205\" text-anchor=\"middle\" fill=\"#7d8590\" font-size=\"14\">06:00</text>\n          <text id=\"label-south\" x=\"200\" y=\"370\" text-anchor=\"middle\" fill=\"#7d8590\" font-size=\"14\">12:00</text>\n          <text id=\"label-west\" x=\"35\" y=\"205\" text-anchor=\"middle\" fill=\"#7d8590\" font-size=\"14\">18:00</text>\n\n          <!-- Photo window vectors (morning) -->\n          <g id=\"morning-window\">\n            <path\n              id=\"morning-arc\"\n              fill=\"rgba(255, 152, 0, 0.2)\"\n              stroke=\"#FF9800\"\n              stroke-width=\"2\"\n            />\n            <text\n              id=\"morning-label\"\n              x=\"240\"\n              y=\"60\"\n              text-anchor=\"middle\"\n              fill=\"#FF9800\"\n              font-size=\"11\"\n              font-weight=\"bold\"\n            >\n              Morning\n            </text>\n          </g>\n\n          <!-- Photo window vectors (afternoon) -->\n          <g id=\"afternoon-window\">\n            <path\n              id=\"afternoon-arc\"\n              fill=\"rgba(33, 150, 243, 0.2)\"\n              stroke=\"#2196F3\"\n              stroke-width=\"2\"\n            />\n            <text\n              id=\"afternoon-label\"\n              x=\"240\"\n              y=\"180\"\n              text-anchor=\"middle\"\n              fill=\"#2196F3\"\n              font-size=\"11\"\n              font-weight=\"bold\"\n            >\n              Afternoon\n            </text>\n          </g>\n\n          <!-- Departure vector -->\n          <line\n            id=\"dep-vector\"\n            x1=\"200\"\n            y1=\"200\"\n            x2=\"280\"\n            y2=\"200\"\n            stroke=\"#2196F3\"\n            stroke-width=\"3\"\n          />\n          <circle id=\"dep-point\" cx=\"280\" cy=\"200\" r=\"5\" fill=\"#2196F3\" />\n          <text\n            id=\"dep-label\"\n            x=\"280\"\n            y=\"190\"\n            text-anchor=\"middle\"\n            fill=\"#2196F3\"\n            font-size=\"11\"\n          >\n            Departure\n          </text>\n\n          <!-- Arrival vector -->\n          <line\n            id=\"arr-vector\"\n            x1=\"200\"\n            y1=\"200\"\n            x2=\"280\"\n            y2=\"200\"\n            stroke=\"#4CAF50\"\n            stroke-width=\"3\"\n          />\n          <circle id=\"arr-point\" cx=\"280\" cy=\"200\" r=\"5\" fill=\"#4CAF50\" />\n          <text\n            id=\"arr-label\"\n            x=\"280\"\n            y=\"190\"\n            text-anchor=\"middle\"\n            fill=\"#4CAF50\"\n            font-size=\"11\"\n          >\n            Arrival\n          </text>\n\n          <!-- Distance arc -->\n          <path\n            id=\"distance-arc\"\n            fill=\"none\"\n            stroke=\"#FFC107\"\n            stroke-width=\"2\"\n            stroke-dasharray=\"3,3\"\n            opacity=\"0.8\"\n          />\n        </svg>\n      </div>\n\n      <div class=\"flight-span-label\">\n        <span id=\"distance-label\"></span>\n      </div>\n\n      <div class=\"results\">\n        <div class=\"result-card\" id=\"naive-result\">\n          <div class=\"result-label\">‚ùå Naive Calculation</div>\n          <div class=\"result-value\" id=\"naive-distance\">-</div>\n        </div>\n\n        <div class=\"result-card\" id=\"vector-result\">\n          <div class=\"result-label\">‚úÖ Vector Distance</div>\n          <div class=\"result-value\" id=\"vector-distance\">-</div>\n        </div>\n\n        <div class=\"result-card\" id=\"morning-result\">\n          <div class=\"result-label\">To Morning Window</div>\n          <div class=\"result-value\" id=\"morning-distance\">-</div>\n        </div>\n\n        <div class=\"result-card\" id=\"photo-ready\">\n          <div class=\"result-label\">Photo Quality</div>\n          <div class=\"result-value\" id=\"photo-quality\">-</div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <!-- Dynamic explanation that appears when methods disagree -->\n  <div\n    class=\"method-difference\"\n    id=\"method-difference\"\n    style=\"display: none\"\n  >\n    <h4>üö® Methods Disagree! Here's Why:</h4>\n    <p id=\"difference-explanation\"></p>\n  </div>\n\n  <!-- Teaching hint at bottom -->\n  <div class=\"bottom-hint\">\n    <button class=\"hint-button\" id=\"hint-button\">\n      üí° Hint: How to break naive calculation\n    </button>\n    <div class=\"hint-content\" id=\"hint-content\" style=\"display: none\">\n      <p><strong>Try this scenario:</strong></p>\n      <ul>\n        <li>Set Departure to <strong>17:00-19:00</strong> (evening)</li>\n        <li>Set Flight Duration to <strong>3-5 hours</strong></li>\n        <li>Set Timezones to <strong>-2 or -3</strong> (westward)</li>\n      </ul>\n      <p>\n        This arrives around <strong>7-11 PM</strong>. The naive method says\n        \"wait 10+ hours for morning\" but vector embedding knows morning is\n        actually <strong>closer</strong> going backwards on the clock!\n      </p>\n    </div>\n  </div>\n</div>\n",
    "assets": []
  },
  {
    "file": "09-takeaways.html",
    "number": 16,
    "title": "Key Takeaways",
    "content": "<div class=\"slide\">\n    <h1>Key Takeaways</h1>\n    \n    <div class=\"main-takeaway\">\n        <h2>üéØ The Golden Rule</h2>\n        <div class=\"golden-rule\">\n            <p>When you see a quantity that wraps around,</p>\n            <p><strong>ask: \"Can I embed this on a circle?\"</strong></p>\n        </div>\n    </div>\n    \n    <div class=\"practical-steps\">\n        <h3>Your Debugging Checklist</h3>\n        <div class=\"checklist\">\n            <div class=\"check-item\">\n                <span class=\"checkbox\">‚úì</span>\n                <div>\n                    <h4>Spot the Wraparound</h4>\n                    <p>Does your value jump discontinuously? (359¬∞ ‚Üí 0¬∞, 11:59 PM ‚Üí 12:00 AM)</p>\n                </div>\n            </div>\n            \n            <div class=\"check-item\">\n                <span class=\"checkbox\">‚úì</span>\n                <div>\n                    <h4>Identify the Period</h4>\n                    <p>What's the cycle length? (360¬∞ for angles, 24 hours for time, 7 for weekdays)</p>\n                </div>\n            </div>\n            \n            <div class=\"check-item\">\n                <span class=\"checkbox\">‚úì</span>\n                <div>\n                    <h4>Choose Your Embedding</h4>\n                    <p>Usually: <code style=\"display: inline-block;\">(cos(<span style=\"display: inline-block; vertical-align: middle;\"><span style=\"display: block; text-align: center; border-bottom: 1px solid;\">2œÄx</span><span style=\"display: block; text-align: center;\">T</span></span>), sin(<span style=\"display: inline-block; vertical-align: middle;\"><span style=\"display: block; text-align: center; border-bottom: 1px solid;\">2œÄx</span><span style=\"display: block; text-align: center;\">T</span></span>))</code> where <code>T</code> is the period</p>\n                </div>\n            </div>\n            \n            <div class=\"check-item\">\n                <span class=\"checkbox\">‚úì</span>\n                <div>\n                    <h4>Work in Vector Space</h4>\n                    <p>Do all math on the vectors, not the raw values</p>\n                </div>\n            </div>\n            \n            <div class=\"check-item\">\n                <span class=\"checkbox\">‚úì</span>\n                <div>\n                    <h4>Project Back When Needed</h4>\n                    <p>Use <code>atan2(y, x)</code> to recover the original quantity</p>\n                </div>\n            </div>\n        </div>\n    </div>\n    \n    <div class=\"libraries-section\">\n        <h3>Don't Reinvent: Use Libraries!</h3>\n        <div class=\"library-grid\">\n            <div class=\"library\">\n                <h4>Python</h4>\n                <ul>\n                    <li><code>scipy.stats.circmean</code></li>\n                    <li><code>astropy.coordinates</code></li>\n                    <li><code>pyquaternion</code></li>\n                </ul>\n            </div>\n            \n            <div class=\"library\">\n                <h4>JavaScript</h4>\n                <ul>\n                    <li><code>d3-interpolate</code></li>\n                    <li><code>three.js Quaternion</code></li>\n                    <li><code>tinycolor2</code></li>\n                </ul>\n            </div>\n            \n            <div class=\"library\">\n                <h4>C++</h4>\n                <ul>\n                    <li><code>Eigen::AngleAxis</code></li>\n                    <li><code>boost::geometry</code></li>\n                    <li><code>tf2</code> (ROS)</li>\n                </ul>\n            </div>\n            \n            <div class=\"library\">\n                <h4>MATLAB</h4>\n                <ul>\n                    <li><code>circstat toolbox</code></li>\n                    <li><code>Aerospace Toolbox</code></li>\n                    <li><code>angle()</code>, <code>unwrap()</code></li>\n                </ul>\n            </div>\n        </div>\n    </div>\n    \n    <div class=\"red-flags\">\n        <h3>üö© Red Flags in Your Code</h3>\n        <div class=\"flag-list\">\n            <div class=\"flag\">\n                <code>if (angle > 180) angle -= 360;</code>\n                <span>‚Üí Use circular math instead</span>\n            </div>\n            <div class=\"flag\">\n                <code>if (crossed_midnight) /* special case */</code>\n                <span>‚Üí Embed on 24-hour circle</span>\n            </div>\n            <div class=\"flag\">\n                <code>while (phase > œÄ) phase -= 2œÄ;</code>\n                <span>‚Üí Work with complex exponentials</span>\n            </div>\n            <div class=\"flag\">\n                <code>// TODO: handle wraparound</code>\n                <span>‚Üí Today's the day!</span>\n            </div>\n        </div>\n    </div>\n    \n    <div class=\"success-story\">\n        <div class=\"story-content\">\n            <h3>üéâ Success Story</h3>\n            <p>\"After this talk, I fixed a 3-year-old GPS bearing bug in 5 lines of code. The robot finally drives in straight lines!\"</p>\n            <cite>‚Äî Future You</cite>\n        </div>\n    </div>\n</div>\n\n",
    "assets": []
  },
  {
    "file": "10-questions.html",
    "number": 17,
    "title": "Questions?",
    "content": "<div class=\"slide\">\n    <div class=\"questions-slide\">\n        <h1>Questions?</h1>\n        \n        <div class=\"contact-info\">\n            <div class=\"demo-offer\">\n                <h3>üî¨ Want to See This in Action?</h3>\n                <p>I've got interactive demos for:</p>\n                <ul>\n                    <li>Live angle averaging visualization</li>\n                    <li>Color interpolation comparison</li>\n                    <li>Robot heading controller simulation</li>\n                </ul>\n            </div>\n            \n            <div class=\"resources\">\n                <h3>üìö Resources</h3>\n                <ul>\n                    <li><strong>Slides:</strong> Available on internal wiki</li>\n                    <li><strong>Code Examples:</strong> Python/JS implementations</li>\n                    <li><strong>Further Reading:</strong> \"Lie Groups for Computer Vision\" by Ethan Eade</li>\n                </ul>\n            </div>\n        </div>\n        \n        <div class=\"challenge\">\n            <h3>üèÜ Challenge for Next Week</h3>\n            <div class=\"challenge-box\">\n                <p>Find ONE wraparound bug in your current codebase</p>\n                <p>Try the embedding approach</p>\n                <p>Share your results!</p>\n            </div>\n        </div>\n        \n        <div class=\"final-thought\">\n            <blockquote>\n                \"The best way to learn mathematics is to do mathematics.\"\n                <cite>‚Äî Paul Halmos</cite>\n            </blockquote>\n            <p>So go break some rings! üíç‚û°Ô∏èüìê</p>\n        </div>\n        \n        <div class=\"thank-you\">\n            <h2>Thank You!</h2>\n            <div class=\"outro-visual\">\n                <svg width=\"300\" height=\"150\" viewBox=\"0 0 300 150\">\n                    <!-- Circle with happy face -->\n                    <circle cx=\"150\" cy=\"75\" r=\"60\" fill=\"none\" stroke=\"#4CAF50\" stroke-width=\"3\"/>\n                    \n                    <!-- Happy eyes -->\n                    <circle cx=\"130\" cy=\"60\" r=\"5\" fill=\"#4CAF50\"/>\n                    <circle cx=\"170\" cy=\"60\" r=\"5\" fill=\"#4CAF50\"/>\n                    \n                    <!-- Happy smile -->\n                    <path d=\"M 120 90 Q 150 110 180 90\" fill=\"none\" stroke=\"#4CAF50\" stroke-width=\"3\"/>\n                    \n                    <!-- Surrounding points showing smooth embedding -->\n                    <g opacity=\"0.5\">\n                        <circle cx=\"90\" cy=\"75\" r=\"3\" fill=\"#2196F3\"/>\n                        <circle cx=\"210\" cy=\"75\" r=\"3\" fill=\"#2196F3\"/>\n                        <circle cx=\"150\" cy=\"15\" r=\"3\" fill=\"#2196F3\"/>\n                        <circle cx=\"150\" cy=\"135\" r=\"3\" fill=\"#2196F3\"/>\n                        \n                        <!-- Smooth curves connecting them -->\n                        <path d=\"M 90 75 Q 90 15, 150 15\" fill=\"none\" stroke=\"#2196F3\" stroke-width=\"1\" opacity=\"0.3\"/>\n                        <path d=\"M 150 15 Q 210 15, 210 75\" fill=\"none\" stroke=\"#2196F3\" stroke-width=\"1\" opacity=\"0.3\"/>\n                        <path d=\"M 210 75 Q 210 135, 150 135\" fill=\"none\" stroke=\"#2196F3\" stroke-width=\"1\" opacity=\"0.3\"/>\n                        <path d=\"M 150 135 Q 90 135, 90 75\" fill=\"none\" stroke=\"#2196F3\" stroke-width=\"1\" opacity=\"0.3\"/>\n                    </g>\n                    \n                    <text x=\"150\" y=\"160\" text-anchor=\"middle\" font-size=\"12\" fill=\"#666\">\n                        No more wraparound headaches!\n                    </text>\n                </svg>\n            </div>\n        </div>\n    </div>\n</div>\n\n",
    "assets": []
  }
]